tag: '1.41-2'
provisionDataStore:
  cassandra: false
  elasticsearch: false
agent:
  enabled: false
spark:
  enabled: false
storage:
  type: elasticsearch
  elasticsearch:
    host: 'logs-api.svc.eqiad.wmnet'
    port: 443
    scheme: https
    user: 'jaeger-prod'
networkPolicy:
  enabled: true

query:
  image: docker-registry.discovery.wmnet/jaeger-query
  cmdlineParams:
    es.tls.enabled: true
    es.index-date-separator: '.'
    query.http.tls.enabled: true
    query.http.tls.key: /tls/tls.key
    query.http.tls.cert: /tls/tls.crt
  agentSidecar:
    enabled: false
  serviceAccount:
    create: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "16687"
  service:
    # query.service.port is 80 by default which makes it confusing if tls is enabled.
    # jaeger-query is listening on 16686 by default so we can as well use that as
    # service port to make it less confusing.
    port: 16686
  networkPolicy:
    enabled: true
    ingressRules:
      customRules:
        - from:
            # Allow ingress from ingressgateway to the default http port
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: istio-system
              podSelector:
                matchLabels:
                  istio: ingressgateway
              ports:
                - port: 16686
                  protocol: TCP
            # Allow ingress from everywhere to the admin port
            # FIXME: This should be limited to prometheus nodes and kubelets
            # FIXME: admin port sounds evil, I could not find docs
            #        on what is running there apart from health check
            #        and monitoring.
            - ports:
                - port: 16687
                  protocol: TCP

    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      # The secret name is static as is is not templateable.
      # There must be a Certificate specified in extraObjects that creates a secret with this name.
      secretName: main-jaeger-query
      readOnly: true

collector:
  image: docker-registry.discovery.wmnet/jaeger-collector
  cmdlineParams:
    es.tls.enabled: true
    es.index-date-separator: '.'
    # Enabling TLS for all ports exposed by default (although we only use the otlp ones)
    collector.http.tls.enabled: true
    collector.http.tls.key: /tls/tls.key
    collector.http.tls.cert: /tls/tls.crt
    collector.grpc.tls.enabled: true
    collector.grpc.tls.key: /tls/tls.key
    collector.grpc.tls.cert: /tls/tls.crt
    collector.otlp.http.tls.enabled: true
    collector.otlp.http.tls.key: /tls/tls.key
    collector.otlp.http.tls.cert: /tls/tls.crt
    collector.otlp.grpc.tls.enabled: true
    collector.otlp.grpc.tls.key: /tls/tls.key
    collector.otlp.grpc.tls.cert: /tls/tls.crt
  serviceAccount:
    create: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "14269"
  service:
    grpc: {}
    http: {}
    zipkin: {}
    otlp:
      grpc:
        port: 4317
      http:
        port: 4318
  networkPolicy:
    enabled: true
    ingressRules:
      customRules:
        - from:
            # Allow ingress from ingressgateway to the default http port
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: istio-system
              podSelector:
                matchLabels:
                  istio: ingressgateway
              ports:
                # OTLP GRPC
                - protocol: TCP
                  port: 4317
                # OTLP HTTP
                - protocol: TCP
                  port: 4318
            # Allow ingress from everywhere to the admin port
            # FIXME: This should be limited to prometheus nodes and kubelets
            # FIXME: admin port sounds evil, I could not find docs
            #        on what is running there apart from health check
            #        and monitoring.
            - ports:
                - port: 14269
                  protocol: TCP
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      # The secret name is static as is is not templateable.
      # There must be a Certificate specified in extraObjects that creates a secret with this name.
      secretName: main-jaeger-collector
      readOnly: true

esIndexCleaner:
  enabled: true
  image: docker-registry.discovery.wmnet/jaeger-es-index-cleaner
  serviceAccount:
    create: false
  # Number of days to keep trace data, before deleting
  numberOfDays: 30
  # Run the cleaner once a day after midnight
  # as a new index will probably be created at ~00:00
  schedule: "42 0 * * *"
  cmdlineParams:
    es.tls.enabled: true
    index-date-separator: '.'
  networkPolicy:
    enabled: true
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443

# Array with extra yaml objects to install alongside the chart. Values are evaluated as a template.
extraObjects:
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: main-jaeger-query
    spec:
      secretName: main-jaeger-query
      commonName: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: main-jaeger-collector
    spec:
      secretName: main-jaeger-collector
      commonName: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
  # Istio Gateway used by query and collector
  - apiVersion: networking.istio.io/v1beta1
    kind: Gateway
    metadata:
      name: "{{ .Release.Name }}"
    spec:
      selector:
        istio: ingressgateway
      servers:
      - hosts:
          - jaeger-query.discovery.wmnet
          - jaeger-query.svc.codfw.wmnet
          - jaeger-query.svc.eqiad.wmnet
          - jaeger-collector-http.discovery.wmnet
          - jaeger-collector-http.svc.codfw.wmnet
          - jaeger-collector-http.svc.eqiad.wmnet
          - jaeger-collector-grpc.discovery.wmnet
          - jaeger-collector-grpc.svc.codfw.wmnet
          - jaeger-collector-grpc.svc.eqiad.wmnet
        port:
          name: https
          number: 443
          protocol: HTTPS
        tls:
          credentialName: jaeger-tls-certificate
          mode: SIMPLE
  # Ingress config for query
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.query.name\" . }}"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-query.discovery.wmnet
        - jaeger-query.svc.codfw.wmnet
        - jaeger-query.svc.eqiad.wmnet
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 16686
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    metadata:
      name: "{{ template \"jaeger.query.name\" . }}"
    spec:
      host: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      trafficPolicy:
        tls:
          mode: SIMPLE
          # The ingressgateway will verify that the upstreams certificate SAN matches one of(!)
          # the subjectAltNames provided here.
          subjectAltNames:
            - jaeger-query.discovery.wmnet
            - jaeger-query.svc.codfw.wmnet
            - jaeger-query.svc.eqiad.wmnet
  # Ingress config for collector
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}-http"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-collector-http.discovery.wmnet
        - jaeger-collector-http.svc.codfw.wmnet
        - jaeger-collector-http.svc.eqiad.wmnet
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 4318
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}-grpc"
    spec:
      gateways:
        - "{{ .Release.Name }}"
      hosts:
        - jaeger-collector-grpc.discovery.wmnet
        - jaeger-collector-grpc.svc.codfw.wmnet
        - jaeger-collector-grpc.svc.eqiad.wmnet
      http:
      - name: default-route
        route:
        - destination:
            host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
            port:
              number: 4317
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    metadata:
      name: "{{ template \"jaeger.collector.name\" . }}"
    spec:
      host: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      trafficPolicy:
        tls:
          mode: SIMPLE
          subjectAltNames:
            - jaeger-collector-http.discovery.wmnet
            - jaeger-collector-http.svc.codfw.wmnet
            - jaeger-collector-http.svc.eqiad.wmnet
            - jaeger-collector-grpc.discovery.wmnet
            - jaeger-collector-grpc.svc.codfw.wmnet
            - jaeger-collector-grpc.svc.eqiad.wmnet
