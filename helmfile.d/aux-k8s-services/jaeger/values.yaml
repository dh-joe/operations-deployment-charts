tag: '1.41-2'
provisionDataStore:
  cassandra: false
  elasticsearch: false
agent:
  enabled: false
spark:
  enabled: false
storage:
  type: elasticsearch
  elasticsearch:
    host: 'logs-api.svc.eqiad.wmnet'
    port: 443
    scheme: https
    user: 'jaeger-prod'
networkPolicy:
  enabled: true
query:
  image: docker-registry.discovery.wmnet/jaeger-query
  cmdlineParams:
    es.tls.enabled: true
    query.http.tls.enabled: true
    query.http.tls.key: /tls/tls.key
    query.http.tls.cert: /tls/tls.crt
  agentSidecar:
    enabled: false
  serviceAccount:
    create: false
  service:
    # query.service.port is 80 by default which makes it confusing if tls is enabled.
    # jaeger-query is listening on 16686 by default so we can as well use that as
    # service port to make it less confusing.
    port: 16686
  networkPolicy:
    enabled: true
    ingressRules:
      # Allow ingress from the ingressgateway
      # FIXME: This actually allows traffic from namespace istio-system as well as
      #        from all pods with label "istio: ingressgateway" (regardless of the namespace)
      #        to all ports.
      namespaceSelector:
        kubernetes.io/metadata.name: istio-system
      podSelector:
        istio: ingressgateway
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      secretName: jaeger-query
      readOnly: true
collector:
  image: docker-registry.discovery.wmnet/jaeger-collector
  cmdlineParams:
    es.tls.enabled: true
    # Enabling TLS for all ports exposed by default (although we only use the otlp ones)
    collector.http.tls.enabled: true
    collector.http.tls.key: /tls/tls.key
    collector.http.tls.cert: /tls/tls.crt
    collector.grpc.tls.enabled: true
    collector.grpc.tls.key: /tls/tls.key
    collector.grpc.tls.cert: /tls/tls.crt
    collector.otlp.http.tls.enabled: true
    collector.otlp.http.tls.key: /tls/tls.key
    collector.otlp.http.tls.cert: /tls/tls.crt
    collector.otlp.grpc.tls.enabled: true
    collector.otlp.grpc.tls.key: /tls/tls.key
    collector.otlp.grpc.tls.cert: /tls/tls.crt
  serviceAccount:
    create: false
  service:
    grpc: {}
    http: {}
    zipkin: {}
    otlp:
      grpc:
        port: 4317
      http:
        port: 4318
  networkPolicy:
    enabled: true
    ingressRules:
      # FIXME: This allows ingress from everywhere
      customRules:
      - ports:
        # OTLP GRPC
        - protocol: TCP
          port: 4317
        # OTLP HTTP
        - protocol: TCP
          port: 4318
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
  extraSecretMounts:
    - name: jaeger-tls
      mountPath: /tls
      subPath: ""
      secretName: jaeger-collector
      readOnly: true
esIndexCleaner:
  enabled: true
  image: docker-registry.discovery.wmnet/jaeger-es-index-cleaner
  serviceAccount:
    create: false
  # Number of days to keep trace data, before deleting
  numberOfDays: 30
  # Run the cleaner once a day after midnight
  # as a new index will probably be created at ~00:00
  schedule: "42 0 * * *"
  cmdlineParams:
    es.tls.enabled: true
  networkPolicy:
    enabled: true
    egressRules:
      # Allow egress to logs-api.svc.eqiad.wmnet
      customRules:
      - to:
        - ipBlock:
            cidr: 10.2.2.79/32
        ports:
        - protocol: TCP
          port: 443
# Array with extra yaml objects to install alongside the chart. Values are evaluated as a template.
extraObjects:
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: jaeger-query
    spec:
      secretName: "{{ template \"jaeger.query.name\" . }}"
      commonName: "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.query.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: jaeger-collector
    spec:
      secretName: "{{ template \"jaeger.collector.name\" . }}"
      commonName: "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
      dnsNames:
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc"
        - "{{ template \"jaeger.collector.name\" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      issuerRef:
        name: discovery
        group: cfssl-issuer.wikimedia.org
        kind: ClusterIssuer
