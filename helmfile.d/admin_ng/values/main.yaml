# cluster_group is used to identify a group of similar clusters (like for one in eqiad and one in codfw)
# that share some config (values) in "admin_ng/values/<cluster_group>.yaml"
cluster_group: main

deployExtraClusterRoles:
  - "flink"

# List all namespaces that should be created in every ServiceOps cluster
# For info about what overrides are available, please check ./common.yaml.
namespaces:
  kube-system:
    systemNamespace: true
    allowCriticalPods: true
    pspClusterRole: allow-privileged-psp
  istio-system:
    systemNamespace: true
    allowCriticalPods: true
  cert-manager:
    systemNamespace: true
    allowCriticalPods: true
  apertium: {}
  api-gateway: {}
  blubberoid: {}
  changeprop: {}
  changeprop-jobqueue:
    resourcequota:
      pods: {}
      compute:
        requests:
          cpu: "180"
          memory: "200Gi"
        limits:
          cpu: "180"
          memory: "200Gi"
  citoid: {}
  cxserver: {}
  datahub:
    tlsHostnames:
      - datahub-frontend
      - datahub-gms
    tlsExtraSANs:
      - datahub.wikimedia.org
  developer-portal:
    tlsExtraSANs:
      - developer.wikimedia.org
  device-analytics: {}
  echostore: {}
  eventgate-analytics: {}
  eventgate-analytics-external: {}
  eventgate-logging-external: {}
  eventgate-main: {}
  eventstreams: {}
  eventstreams-internal: {}
  image-suggestion: {}
  linkrecommendation: {}
  mathoid: {}
  miscweb:
    tlsExtraSANs:
      - static-bugzilla.wikimedia.org
  mobileapps:
    resourcequota:
      pods: {}
      compute:
        requests:
          cpu: "600"
          memory: "250Gi"
        limits:
          cpu: "600"
          memory: "250Gi"
  mw-debug:
    pspClusterRole: allow-mediawiki-psp
  mw-api-int:
    pspClusterRole: allow-mediawiki-psp
  mw-api-ext:
    pspClusterRole: allow-mediawiki-psp
  mw-jobrunner:
    pspClusterRole: allow-mediawiki-psp
# Commented out until discussion of videoscaler on kubernetes is done
# https://phabricator.wikimedia.org/T321899
#  mw-videoscaler:
#    pspClusterRole: allow-mediawiki-psp
  mw-web:
    pspClusterRole: allow-mediawiki-psp
    resourcequota:
      pods: {}
      compute:
        requests:
          cpu: "125"
          memory: "125Gi"
        limits:
          cpu: "125"
          memory: "125Gi"
  proton: {}
  push-notifications: {}
  rdf-streaming-updater:
    deployClusterRole: deploy-flink
    # Bump max container memory limit to 4.5Gi, otherwise use the defaults
    limitranges:
      container:
        min:
          memory: "100Mi"
          cpu: "100m"
        max:
          memory: "4.5Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "100Mi"
          cpu: "100m"
        max:
          memory: "5Gi"
          cpu: "9"
  recommendation-api: {}
  sessionstore: {}
  shellbox: {}
  shellbox-constraints: {}
  shellbox-media: {}
  shellbox-syntaxhighlight: {}
  shellbox-timeline: {}
  similar-users: {}
  tegola-vector-tiles: {}
  termbox: {}
  thumbor:
    # Bump max memory limit to 10Gi, otherwise use the defaults
    limitranges:
      container:
        min:
          memory: "100Mi"
          cpu: "100m"
        max:
          memory: "3Gi"
          cpu: "8"
        defaultRequest:
          memory: "100Mi"
          cpu: "100m"
        default:
          memory: "100Mi"
          cpu: "100m"
      pod:
        min:
          memory: "100Mi"
          cpu: "100m"
        max:
          memory: "10Gi"
          cpu: "9"
    resourcequota:
      pods: {}
      compute:
        requests:
          cpu: "300"
          memory: "200Gi"
        limits:
          cpu: "300"
          memory: "200Gi"
  toolhub: {}
  wikifeeds: {}
  zotero: {}

GlobalNetworkPolicies:
  # Allow icmp for all pods and all directions. Useful in debugging
  allow-all-icmp:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Ingress
      - Egress
    ingress:
      - action: Allow
        protocol: ICMP
      - action: Allow
        protocol: ICMPv6
    egress:
      - action: Allow
        protocol: ICMP
      - action: Allow
        protocol: ICMPv6
  default-deny:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Ingress
      - Egress
    egress:
      # Allow all namespaces to communicate to DNS pods
      - action: Allow
        protocol: UDP
        destination:
          selector: 'k8s-app == "kube-dns"'
          ports:
            - 53
  # This allows egress from all pods to all pods. Ingress still needs to be allowed by the destination, though.
  allow-pod-to-pod:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Egress
    egress:
      - action: Allow
        destination:
          nets:
            # wikikube eqiad. In the past it was 10.64.64.0/21
            - "10.67.128.0/18"
            # wikikube codfw. In the past it was 10.192.64.0/21
            - "10.194.128.0/18"
            # staging-eqiad
            - "10.64.75.0/24"
            # staging-codfw
            - "10.192.75.0/24"
      - action: Allow
        destination:
          nets:
            # eqiad
            - "2620:0:861:cabe::/64"
            # codfw
            - "2620:0:860:cabe::/64"
            # staging-eqiad
            - "2620:0:861:babe::/64"
            # staging-codfw
            - "2620:0:860:babe::/64"
  # FIXE: This is probably no longer needed, everything should use CoreDNS now
  allow-dns:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: UDP
        destination:
          ports:
            - 53
          nets:
            - 10.3.0.1/32
  # Allow all pods access to url-downloaders
  allow-urldownloaders:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 8080
          nets:
            - 208.80.154.29/32 # urldownloader1001
            - 208.80.154.81/32 # urldownloader1002
            - 208.80.153.24/32 # urldownloader2001
            - 208.80.153.61/32 # urldownloader2002
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 8080
          nets:
            - 2620:0:861:1:208:80:154:29/128 # urldownloader1001
            - 2620:0:861:3:208:80:154:81/128 # urldownloader1002
            - 2620:0:860:1:208:80:153:24/128 # urldownloader2001
            - 2620:0:860:2:208:80:153:61/128 # urldownloader2002
  # Allow all pods access to restbase
  allow-restbase:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 7231
            - 7443
          nets:
            - 10.2.2.17/32
            - 10.2.1.17/32
  # Allow all pods access to uncached api
  allow-uncached-api:
    namespaceSelector: 'has(projectcalico.org/name) && projectcalico.org/name != "kube-system"'
    types:
      - Egress
    egress:
      - action: Allow
        protocol: TCP
        destination:
          ports:
            - 80
            - 443
          nets:
            - 10.2.2.22/32
            - 10.2.1.22/32
