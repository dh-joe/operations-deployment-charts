environments:
  eqiad:
    values:
      - "values/common.yaml"
      - "values/main.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # Deploy network policies for a istio ingresscontroller setup
      - istio_gateways: true
      # Deploy cert-manager & cfssl-issuer
      - install_cert_manager: true
      - install_kube_state_metrics: true
      # Create default service certificates
      - namespace_certificates: true
      - install_flink_operator: true
      - install_sidecar_job_controller: true
  codfw:
    values:
      - "values/common.yaml"
      - "values/main.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # Deploy network policies for a istio ingresscontroller setup
      - istio_gateways: true
      # Deploy cert-manager & cfssl-issuer
      - install_cert_manager: true
      - install_kube_state_metrics: true
      # Create default service certificates
      - namespace_certificates: true
      - install_flink_operator: true
      - install_sidecar_job_controller: true
  staging-eqiad:
    values:
      - "values/common.yaml"
      - "values/main.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # Deploy network policies for a istio ingresscontroller setup
      - istio_gateways: true
      # Deploy cert-manager & cfssl-issuer
      - install_cert_manager: true
      - install_kube_state_metrics: true
      # Create default service certificates
      - namespace_certificates: true
      - install_flink_operator: true
      - install_sidecar_job_controller: true
  staging-codfw:
    values:
      - "values/common.yaml"
      - "values/main.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # Deploy network policies for a istio ingresscontroller setup
      - istio_gateways: true
      # Deploy cert-manager & cfssl-issuer
      - install_cert_manager: true
      - install_kube_state_metrics: true
      # Create default service certificates
      - namespace_certificates: true
      - install_flink_operator: true
      - install_sidecar_job_controller: true
      - install_external_services: true
  # Machine Learning clusters
  ml-serve-eqiad:
    values:
      - "values/common.yaml"
      - "values/ml-serve.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      - install_knative: true
      - install_kserve: true
      - install_cert_manager: true
      - install_kube_state_metrics: true
      - namespace_certificates: true
      # Deploy network policies for a Istio setup
      - istio_gateways: true
      # Experiments currently ongoing in T297612
      - istio_sidecar_proxy: true
  ml-serve-codfw:
    values:
      - "values/common.yaml"
      - "values/ml-serve.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      - install_knative: true
      - install_kserve: true
      - install_cert_manager: true
      - install_kube_state_metrics: true
      - namespace_certificates: true
      # Deploy network policies for a Istio setup
      - istio_gateways: true
      # Experiments currently ongoing in T297612
      - istio_sidecar_proxy: true
  ml-staging-codfw:
    values:
      - "values/common.yaml"
      - "values/ml-serve.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      - install_knative: true
      - install_kserve: true
      - install_cert_manager: true
      - install_kube_state_metrics: true
      - namespace_certificates: true
      # Deploy network policies for a Istio setup
      - istio_gateways: true
      # Experiments currently ongoing in T297612
      - istio_sidecar_proxy: true
  dse-k8s-eqiad:
    values:
      - "values/common.yaml"
      - "values/dse-k8s.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # We are not installing knative and kserve yet, but may do so in the near future.
      # - install_knative: true
      # - install_kserve: true
      - install_cert_manager: true
      - install_kube_state_metrics: true
      - namespace_certificates: true
      # Deploy network policies for a Istio setup
      - istio_gateways: true
      - istio_sidecar_proxy: true
      - install_flink_operator: true
      - install_spark_operator: true
      - install_external_services: true
  aux-k8s-eqiad:
    values:
      - "values/common.yaml"
      - "values/aux-k8s.yaml"
      - "values/{{ .Environment.Name }}/values.yaml"
      # Deploy network policies for a istio ingresscontroller setup
      - istio_gateways: true
      # Deploy cert-manager & cfssl-issuer
      - install_cert_manager: true
      # Create default service certificates
      - namespace_certificates: true
      - install_kube_state_metrics: true

---
bases:
  - helmfile_rbac.yaml
  - helmfile_psp.yaml
  - calico/helmfile.yaml
  - coredns/helmfile.yaml
  - helmfile_namespaces.yaml
  - cert-manager/helmfile.yaml
  - helmfile_namespace_certs.yaml
  - helmfile_istio-gateways.yaml
  - helmfile_istio-proxy.yaml
  - eventrouter/helmfile.yaml
  - knative-serving/helmfile.yaml
  - kserve/helmfile.yaml
  - kube-state-metrics/helmfile.yaml
  - helm-state-metrics/helmfile.yaml
  - flink-operator/helmfile.yaml
  - spark-operator/helmfile.yaml
  - k8s-controller-sidecars/helmfile.yaml
  - external-services/helmfile.yaml

hooks:
  - events: ["prepare"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{ .Environment.Name }}] START helmfile.d/admin '{{`{{.HelmfileCommand}}`}}'.",
      ]
  - events: ["cleanup"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{ .Environment.Name }}] DONE helmfile.d/admin '{{`{{.HelmfileCommand}}`}}'.",
      ]
---
helmBinary: helm3
helmDefaults:
  createNamespace: false
  verify: false
  atomic: true
  timeout: 600
  recreatePods: false
  force: false
  args:
    - "--kubeconfig=/etc/kubernetes/admin-{{ .Environment.Name }}.config"
