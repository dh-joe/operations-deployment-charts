releases:
  - name: namespaces
    chart: wmf-stable/raw
    namespace: kube-system
    needs:
      - kube-system/coredns
    values:
      - templates:
      {{- range $namespace, $values := .Environment.Values.namespaces }}
        {{/* Don't mess with Kubernetes builtin namespaces while still allow to deploy to it */}}
        {{ $isBuiltinNamespace := or (eq (hasPrefix "kube-" $namespace) true) (eq $namespace "default") }}
        {{/* All builtin namespaces are system namespaces */}}
        {{ $isSystemNamespace := $values | get "systemNamespace" $isBuiltinNamespace }}

        {{/* Fetch the PSP cluster role to be used for this namespace, default to "allow-restricted-psp" */}}
        {{ $pspClusterRole := $values | get "pspClusterRole" "allow-restricted-psp" }}

        {{- if eq $isBuiltinNamespace false }}
          - |
            apiVersion: v1
            kind: Namespace
            metadata:
              name: {{ $namespace }}
              {{- $labels := $values | get "labels" dict }}
              {{- if and (eq $pspClusterRole "allow-restricted-psp") $.Environment.Values.PodSecurityStandard.enabled -}}
                {{- $labels := mergeOverwrite $labels (dict "pod-security.kubernetes.io/audit" "restricted") }}
                {{- if ($.Environment.Values.PodSecurityStandard | get "enforce" false) -}}
                {{- $labels := mergeOverwrite $labels (dict "pod-security.kubernetes.io/enforce" "restricted") }}
                {{- $labels := mergeOverwrite $labels (dict "pod-security.kubernetes.io/warn" "restricted") }}
                {{- end }}
              {{- end }}
              {{- with $labels }}
              labels:
              {{- range $k, $v := . }}
                {{ $k }}: {{ $v | quote }}
              {{- end }}
              {{- end }}
        {{- end }}
        {{- if eq $isSystemNamespace false }}
          - |
            # Bind the deployer read-only user to the view Role for this namespace
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: view
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: view
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "readOnlyUser" | default $namespace }}
          - |
            # Bind the deployer user to the deploy Role for this namespace
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: deploy
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: {{ $values | getOrNil "deployClusterRole" | default "deploy" }}
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "deployUser" | default (list $namespace "deploy" | join "-" ) }}
          - |
            # Bind the deploy user and all service account of this namespace to
            # the allow-restricted-psp role, see helmfile_psp.yaml
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: allow-psp
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
            {{- if and (eq $pspClusterRole "allow-restricted-psp") ($.Environment.Values.PodSecurityStandard | get "disableRestrictedPSP" false) }}
              {{/* Binding the namespace to the privileged PSP will effectively disable PSP validation */}}
              name: allow-privileged-psp
            {{- else }}
              name: {{ $pspClusterRole }}
            {{- end }}
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: Group
                name: system:serviceaccounts:{{ $namespace }}
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "deployUser" | default (list $namespace "deploy" | join "-" ) }}
          {{ $limitranges := $values | getOrNil "limitranges" | default $.Environment.Values.limitranges }}
          {{- with $limitranges}}
          {{- if or .container .pod }}
          - |
            apiVersion: v1
            kind: LimitRange
            metadata:
              name: general-limits
              namespace: {{ $namespace }}
            spec:
              limits:
                {{- if .container }}
                - type: Container
                  {{- if .container.min }}
                  min:
                    {{- .container.min | toYaml | nindent 20 }}
                  {{- end }}
                  {{- if .container.max }}
                  max:
                    {{- .container.max | toYaml | nindent 20 }}
                  {{- end }}
                  {{- if .container.defaultRequest }}
                  defaultRequest:
                    {{- .container.defaultRequest | toYaml | nindent 20 }}
                  {{- end }}
                  {{- if .container.default }}
                  default:
                    {{- .container.default | toYaml | nindent 20 }}
                  {{- end }}
                {{- end }}{{/* end if .container */}}
                {{- if .pod }}
                - type: Pod
                  {{- if hasKey .pod "min" }}
                  min:
                    {{- .pod.min | toYaml | nindent 20 }}
                  {{- end }}
                  {{- if hasKey .pod "max" }}
                  max:
                    {{- .pod.max | toYaml | nindent 20 }}
                  {{- end }}
                {{- end }}{{/* end if .pod */}}
          {{- end }}
          {{- end }}
          {{ $resourcequota := $values | getOrNil "resourcequota" | default $.Environment.Values.resourcequota }}
          {{- with $resourcequota }}
          {{- $count := . | get "count" list }}
          {{- if or $count .compute.requests .compute.limits }}
          - |
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: quota-compute-resources
              namespace: {{ $namespace }}
            spec:
              hard:
                {{- range $resource, $c := $count }}
                count/{{ $resource }}: {{ $c }}
                {{- end }}
                {{- if .compute.requests.cpu }}
                requests.cpu: {{ .compute.requests.cpu | quote}}
                {{- end }}
                {{- if .compute.requests.memory }}
                requests.memory: {{ .compute.requests.memory | quote }}
                {{- end }}
                {{- if .compute.limits.cpu }}
                limits.cpu: {{ .compute.limits.cpu | quote }}
                {{- end }}
                {{- if .compute.limits.memory }}
                limits.memory: {{ .compute.limits.memory | quote }}
                {{- end }}
          {{- end }}
          {{- end }}
        {{- else }}{{- /* else if eq $isSystemNamespace false */}}
          - |
            # Bind all service account of this namespace to the desired clusterrole.
            # See helmfile_psp.yaml
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: allow-psp
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
            {{- if and (eq $pspClusterRole "allow-restricted-psp") ($.Environment.Values.PodSecurityStandard | get "disableRestrictedPSP" false) }}
              {{/* Binding the namespace to the privileged PSP will effectively disable PSP validation */}}
              name: allow-privileged-psp
            {{- else }}
              name: {{ $pspClusterRole }}
            {{- end }}
            subjects:
              # If Pod's are created via a controller (deployment, replicaset) the Pod's service
              # account needs access to the PSP.
              - apiGroup: rbac.authorization.k8s.io
                kind: Group
                name: system:serviceaccounts:{{ $namespace }}
        {{- end }}{{- /* end if eq $isSystemNamespace false */}}
        {{- if $values | get "allowCriticalPods" false }}
          - |
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: priorityclass
              namespace: {{ $namespace }}
            spec:
              scopeSelector:
                matchExpressions:
                  - operator: In
                    scopeName: PriorityClass
                    values:
                      - system-cluster-critical
                      - system-node-critical
        {{- end }}
      {{- end }}{{- /* end range namespaces */}}
