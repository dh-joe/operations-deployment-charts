
releases:
  - name: namespaces
    chart: wmf-stable/raw
    namespace: kube-system
    needs:
      - kube-system/coredns
    values:
      - templates:
      {{- range $namespace, $values := .Environment.Values.namespaces }}
        {{/* Don't mess with Kubernetes builtin namespaces while still allow to deploy to it */}}
        {{ $isBuiltinNamespace := or (eq (hasPrefix "kube-" $namespace) true) (eq $namespace "default") }}
        {{/* All builtin namespaces are system namespaces */}}
        {{ $isSystemNamespace := $values | get "systemNamespace" $isBuiltinNamespace }}
        {{- if eq $isBuiltinNamespace false }}
          - |
            apiVersion: v1
            kind: Namespace
            metadata:
              name: {{ $namespace }}
              {{- $labels := $values | get "labels" dict }}
              {{- if $.Environment.Values.NamespaceDefaultLabelName }}
                {{- $labels := mergeOverwrite $labels (dict "kubernetes.io/metadata.name" $namespace) }}
              {{- end }}
              {{- with $labels }}
              labels:
              {{- range $k, $v := . }}
                {{ $k }}: {{ $v | quote }}
              {{- end }}
              {{- end }}
              annotations:
                net.beta.kubernetes.io/network-policy: '{"ingress":{"isolation":"DefaultDeny"}}'
        {{- end }}
        {{- if eq $isSystemNamespace false }}
          - |
            # Bind the deployer read-only user to the view Role for this namespace
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: view
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: view
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "readOnlyUser" | default $namespace }}
          - |
            # Bind the deployer user to the deploy Role for this namespace
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: deploy
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: {{ $values | getOrNil "deployClusterRole" | default "deploy" }}
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "deployUser" | default | list $namespace "deploy" | join "-" }}
          - |
            # Bind the deploy user and all service account of this namespace to
            # the allow-restricted-psp role, see helmfile_psp.yaml
            {{- $pspClusterRole := $values | getOrNil "pspClusterRole" | default "allow-restricted-psp"}}
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: allow-psp
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: {{ $pspClusterRole }}
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: Group
                name: system:serviceaccounts:{{ $namespace }}
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: {{ $values | getOrNil "deployUser" | default | list $namespace "deploy" | join "-" }}
          {{ $limitranges := $values | getOrNil "limitranges" | default $.Environment.Values.limitranges }}
          {{- with $limitranges}}
          - |
            apiVersion: v1
            kind: LimitRange
            metadata:
              name: general-limits
              namespace: {{ $namespace }}
            spec:
              limits:
                - min:
                    cpu: {{ .container.min.cpu  | quote }}
                    memory: {{ .container.min.memory | quote }}
                  max:
                    cpu: {{ .container.max.cpu  | quote }}
                    memory: {{ .container.max.memory | quote }}
                  defaultRequest:
                    cpu: {{ .container.defaultRequest.cpu | quote }}
                    memory: {{ .container.defaultRequest.memory | quote }}
                  default:
                    cpu: {{ .container.default.cpu | quote}}
                    memory: {{ .container.default.memory | quote }}
                  type: Container
                - min:
                    cpu: {{ .pod.min.cpu | quote }}
                    memory: {{ .pod.min.memory | quote }}
                  max:
                    cpu: {{ .pod.max.cpu | quote }}
                    memory: {{ .pod.max.memory | quote }}
                  type: Pod
          {{- end }}
          {{ $resourcequota := $values | getOrNil "resourcequota" | default $.Environment.Values.resourcequota }}
          {{- with $resourcequota }}
          - |
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: quota-compute-resources
              namespace: {{ $namespace }}
            spec:
              hard:
                {{- if .pods  }}
                pods: {{ .pods | quote }}
                {{- end }}
                requests.cpu: {{ .compute.requests.cpu  | quote}}
                requests.memory: {{ .compute.requests.memory | quote }}
                limits.cpu: {{ .compute.limits.cpu | quote }}
                limits.memory: {{ .compute.limits.memory | quote }}
          {{- end }}
        {{- else }}{{- /* else if eq $isSystemNamespace false */}}
          - |
            # Bind all service account of this namespace to the desired clusterrole.
            # See helmfile_psp.yaml
            {{- $pspClusterRole := $values | get "pspClusterRole" "allow-restricted-psp" }}
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: allow-psp
              namespace: {{ $namespace }}
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: {{ $pspClusterRole }}
            subjects:
              # If Pod's are created via a controller (deployment, replicaset) the Pod's service
              # account needs access to the PSP.
              - apiGroup: rbac.authorization.k8s.io
                kind: Group
                name: system:serviceaccounts:{{ $namespace }}
        {{- end }}{{- /* end if eq $isSystemNamespace false */}}
        {{- if $values | get "allowCriticalPods" false }}
          - |
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: priorityclass
              namespace: {{ $namespace }}
            spec:
              scopeSelector:
                matchExpressions:
                  - operator: In
                    scopeName: PriorityClass
                    values:
                      - system-cluster-critical
                      - system-node-critical
        {{- end }}
      {{- end }}{{- /* end range namespaces */}}