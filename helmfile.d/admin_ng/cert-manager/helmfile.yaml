# You can include multiple releases in your helmfile, but you can't specify environments
# as they are defined in the parent helmfile.
#
# Each defined release will be installed into every environment.
#
# Be sure to include your new helmfile into the "bases:" array in the parent helmfile.
templates:
  default: &default
    namespace: cert-manager
    missingFileHandler: Warn
    installedTemplate: "{{`{{ if hasKey .Environment.Values \"install_cert_manager\" }}{{ .Environment.Values.install_cert_manager }}{{ else }}{{ false }}{{end}}`}}"

releases:
  - name: cert-manager
    chart: wmf-stable/cert-manager
    {{- $version := .Values.chartVersions | get "wmf-stable/cert-manager" "" }}
    {{- if $version }}
    version: {{ $version }}
    {{- end }}
    <<: *default
    needs:
      - kube-system/coredns
      - kube-system/namespaces
    values:
      - "values/common.yaml"                                                   # Generic default values for all environments
      - "values/{{ .Values.cluster_group }}.yaml"                              # Default values for this cluster group
      - "values/{{ .Environment.Name }}/values.yaml"                           # Environment specific defaults
      - "cert-manager/{{`{{ .Release.Name }}`}}-values.yaml"                   # Release specific overrides
      - "values/{{ .Environment.Name }}/{{`{{ .Release.Name }}`}}-values.yaml" # Overrides specific to release in environment
      - "/etc/helmfile-defaults/private/admin/{{`{{ .Release.Name }}`}}/{{ .Environment.Name }}.yaml"    # Secrets (from private puppet repo)
  - name: cfssl-issuer-crds
    chart: wmf-stable/cfssl-issuer-crds
    {{- $version := .Values.chartVersions | get "wmf-stable/cfssl-issuer-crds" "" }}
    {{- if $version }}
    version: {{ $version }}
    {{- end }}
    <<: *default
    needs:
      - kube-system/namespaces
  - name: cfssl-issuer
    chart: wmf-stable/cfssl-issuer
    {{- $version := .Values.chartVersions | get "wmf-stable/cfssl-issuer" "" }}
    {{- if $version }}
    version: {{ $version }}
    {{- end }}
    <<: *default
    needs:
      - cert-manager/cert-manager
      - cert-manager/cfssl-issuer-crds
    values:
      - "values/common.yaml"                                                   # Generic default values for all environments
      - "values/{{ .Values.cluster_group }}.yaml"                              # Default values for this cluster group
      - "values/{{ .Environment.Name }}/values.yaml"                           # Environment specific defaults
      - "cert-manager/{{`{{ .Release.Name }}`}}-values.yaml"                   # Release specific overrides
      - "values/{{ .Environment.Name }}/{{`{{ .Release.Name }}`}}-values.yaml" # Overrides specific to release in environment
      - "/etc/helmfile-defaults/private/admin/{{`{{ .Release.Name }}`}}/{{ .Environment.Name }}.yaml"    # Secrets (from private puppet repo)
  - name: cert-manager-networkpolicies
    chart: wmf-stable/raw
    <<: *default
    needs:
      - kube-system/namespaces
    values:
      - resources:
        # Allow all pods in this namespace to contact the Kubernetes API
        - apiVersion: crd.projectcalico.org/v1
          kind: NetworkPolicy
          metadata:
            name: cert-manager-kubeapi-calico
          spec:
            types:
              - Egress
            selector: all()
            egress:
              - action: Allow
                destination:
                  services:
                    name: kubernetes
                    namespace: default
        # Allow ingress from masters to webhook
        - apiVersion: crd.projectcalico.org/v1
          kind: NetworkPolicy
          protocol: TCP
          metadata:
            name: cert-manager-webhook-calico
          spec:
            types:
              - Ingress
            selector: "app.kubernetes.io/name == 'webhook'"
            ingress:
              - action: Allow
                source:
                  services:
                    name: kubernetes
                    namespace: default
                destination:
                  ports:
                    - 10250
        - apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: cfssl-issuer
          spec:
            podSelector:
              matchLabels:
                app.kubernetes.io/name: cfssl-issuer
            egress:
              # Allow cfssl-issuer to reach pki.discovery.wmnet
              # FIXME: Hardcoded IPs here
              - to:
                # pki1001.eqiad.wmnet
                - ipBlock:
                    cidr: 10.64.0.10/32
                - ipBlock:
                    cidr: 2620:0:861:101:10:64:0:10/128
                # pki2002.codfw.wmnet
                - ipBlock:
                    cidr: 10.192.16.172/32
                - ipBlock:
                    cidr: 2620:0:860:102:10:192:16:172/128
                ports:
                - port: 8443
                  protocol: TCP


