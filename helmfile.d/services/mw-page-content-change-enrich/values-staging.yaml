# NOTE: values-staging.yaml is configured to be deployed in staging-eqiad.
# It uses Kafka test-eqiad and thanos swift in eqiad.
#
app:
  config_files:
    app.config.yaml:

      # Configs for eventutilities python stream_manager.
      stream_manager:
        # Configure sources and sinks.
        source:
          options:
            bootstrap_servers: kafka-test1006.eqiad.wmnet:9093,kafka-test1007.eqiad.wmnet:9093,kafka-test1008.eqiad.wmnet:9093,kafka-test1009.eqiad.wmnet:9093,kafka-test1010.eqiad.wmnet:9093
            # Kafka consumer group naming follows convention: <job_name>.<k8s_cluster_name>
            consumer_group: mw-page-content-change-enrich.wikikube-staging-eqiad.000

        sink:
          options:
            bootstrap_servers: kafka-test1006.eqiad.wmnet:9093,kafka-test1007.eqiad.wmnet:9093,kafka-test1008.eqiad.wmnet:9093,kafka-test1009.eqiad.wmnet:9093,kafka-test1010.eqiad.wmnet:9093
            kafka_topic_prefix: eqiad.

        error_sink:
          options:
            bootstrap_servers: kafka-test1006.eqiad.wmnet:9093,kafka-test1007.eqiad.wmnet:9093,kafka-test1008.eqiad.wmnet:9093,kafka-test1009.eqiad.wmnet:9093,kafka-test1010.eqiad.wmnet:9093
            kafka_topic_prefix: eqiad.

  flinkConfiguration:
    "high-availability.storageDir": s3://mw-page-content-change-enrich.wikikube-staging-eqiad/flink/high-availability
    "state.checkpoints.dir": s3://mw-page-content-change-enrich.wikikube-staging-eqiad/flink/checkpoints # needed for upgradeMode: savepoint
    "state.savepoints.dir": s3://mw-page-content-change-enrich.wikikube-staging-eqiad/flink/savepoints # needed for upgradeMode: savepoint


# TODO: when deploying to eqiad + codfw, we'll need to set
# higher resource limits for taskmanagers.
# See helmfile.d/dse-k8s-services/values-dse-k8s-eqiad.yaml.

# NOTE: staging uses Kafka test-eqiad cluster for both source and sink.
# Because kafka test-eqiad doesn't have real mediawiki.page_change
# traffic, it won't really be doing any work.
external_services:
  kafka:
    - test-eqiad

networkpolicy:
  egress:
    dst_nets:
      # If we want to use thanos-swift.discovery.wmnet, our app should be DC
      # agnostic.
      # See https://phabricator.wikimedia.org/T346877
      # thanos-swift cluster in eqiad for checkpoints
      - cidr: 10.2.2.54/32   # thanos-swift.svc.eqiad.wmnet
        ports:
          - port: 443
            protocol: tcp
      # thanos-swift cluster in codfw for checkpoints
      - cidr: 10.2.1.54/32   # thanos-swift.svc.codfw.wmnet
        ports:
          - port: 443
            protocol: tcp