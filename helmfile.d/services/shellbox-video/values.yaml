main_app:
  requests:
    cpu: 8  # equal to FFmpegThreads
    memory: 4Gi  # TranscodeBackgroundMemoryLimit
  limits:
    cpu: 8  # equal to FFmpegThreads
    memory: 6G

shellbox:
  flavour: video
  min_avail_workers: 1
  check_process: "ffmpeg"
  # Reduce (but not eliminate) the likelihood that we will
  # accidentally schedule two jobs on a pod by being more fastidious
  # about our checks.
  readinessParams:
    failureThreshold: 1
    periodSeconds: 1

service:
  deployment: production

mesh:
  enabled: true
  public_port: 4080
  upstream_timeout: "86400.0s"  # 1 day
  idle_timeout: "86400.0s"  # 1 day
  idle_upstream_timeout: "86400.0s"  # 1 day

php:
  # Two workers per pod - but effectively 1 left for encoding when
  # used with min_avail_workers, 1 spare for healthchecks. We do this
  # to make resource management a little easier given how hungry
  # ffmpeg can be
  workers: 2
  # Set timeout to just short of 1d as we want to let other parts further up the stack handle the timeouts
  timeout: 86390

config:
  public:
   FPM__log_level: debug

resources:
  # Keep resource limits in mind! For example JUST for the shellbox
  # containers, not including sidecars, 16 replicas is:
  # 128 CPUs requested/limit
  # 64GB memory requested
  # 96GB memory limit
  # Including the sidecars, the limit is effectively 160 for CPU alone
  replicas: 48
