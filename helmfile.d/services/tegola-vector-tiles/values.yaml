helm_scaffold_version: 0.3
docker:
  registry: docker-registry.discovery.wmnet
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  image: wikimedia/operations-software-tegola
  version: 2021-10-12-090443-production
  requests:
    cpu: 200m
    memory: 200Mi
  limits:
    cpu: 400m
    memory: 400Mi
  postgres:
    user: tilerator
    host: localhost
    max_connections: 5
monitoring:
  enabled: true
service:
  deployment: production
tls:
  enabled: true
  public_port: 4105
  telemetry:
    enabled: true
tileCaching:
  enabled: true
  config:
    type: "s3"  # S3 compatible API on swift
    endpoint: "thanos-swift.discovery.wmnet"
    basepath: "eqiad"
tilePregeneration:
  cronJobEnabled: true

config:
  public:
    TEGOLA_BROKER_URL: "kafka://kafka-main1001.eqiad.wmnet:9092"
    TEGOLA_QUEUE_NAME: "eqiad.maps.tile_change"

# Temporarily we will use envoy as a L4 tcp proxy until envoy's
# Postgres proxy filter is production ready
# https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/postgres_proxy_filter#config-network-filters-postgres-proxy
tcp_proxy:
  listeners:
    - maps_postgres
tcp_services_proxy:
  maps_postgres:
    port: 5432
    connect_timeout: "60s"
    upstreams:
      # master node
      # - address: maps1009.eqiad.wmnet
      #   port: 5432
      # read replicas
      - address: maps1005.eqiad.wmnet
        port: 5432
      - address: maps1006.eqiad.wmnet
        port: 5432
      - address: maps1007.eqiad.wmnet
        port: 5432
      - address: maps1008.eqiad.wmnet
        port: 5432
      - address: maps1010.eqiad.wmnet
        port: 5432

networkpolicy:
  egress:
    enabled: true
    # Allow connection to postgress masters/secondary instances running on maps* hosts
    # We tried to use envoy's thanos-swift listener, but we run into issues with the
    # s3 client, so we are keeping it simple for now, by allowing direct connections
    # to thanos-swift
    dst_nets:
      - cidr: 10.64.0.12/32 # maps1005.eqiad.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.64.0.18/32 # maps1006.eqiad.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.64.16.6/32 # maps1007.eqiad.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.64.16.27/32 # maps1008.eqiad.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.64.32.8/32 # maps1009.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.64.48.6/32 # maps1010.eqiad.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.0.155/32 # maps2005.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.16.31/32 # maps2006.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.32.46/32 # maps2007.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.48.165/32 # maps2008.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.16.107/32 # maps2009.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.192.48.166/32 # maps2010.codfw.wmnet
        ports:
        - port: 5432
          protocol: tcp
      - cidr: 10.2.2.54/32 # thanos-swift.svc.eqiad.wmnet
        ports:
        - port: 443
          protocol: tcp
      - cidr: 10.2.1.54/32 # thanos-swift.svc.codfw.wmnet
        ports:
        - port: 443
          protocol: tcp
kafka:
  allowed_clusters:
    - test-eqiad
    - main-eqiad
