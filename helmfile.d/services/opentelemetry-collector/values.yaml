mode: daemonset

rollout:
  rollingUpdate:
    maxUnavailable: 3

config:
  # Disable all receivers except OTLP
  receivers:
    jaeger: null
    prometheus: null
    zipkin: null
  exporters:
    otlp:
      # Don't forget to update the egress rules below upon changing this
      endpoint: jaeger-collector-grpc.svc.eqiad.wmnet:30443
      tls:
        ca_file: /etc/ssl/certs/wmf-ca-certificates.crt
  processors:
    # Rewrite service.name to something meaningful, as our Envoys don't
    # currently provide this.  https://phabricator.wikimedia.org/T363407
    # Do this using the transformprocessor:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    transform/service_from_upstream_cluster_or_nodeid:
      error_mode: ignore
      trace_statements:
        # Although we're ultimately editing the resource-level attributes,
        # we must run in the span context to have access to the per-span attributes (like upstream_cluster.name).
        - context: span
          statements:
            # If we have a node_id that looks pod-name-esque, try to parse out
            # something we can use as a service name from the first part.
            # (Really it will be the k8s namespace.)
            - set(attributes["_k8s_namespace"], attributes["node_id"])
                where (attributes["node_id"] != nil) and (attributes["node_id"] != "")
            # Yes, unfortunately, you do need to escape $ as $$, because otelcol performs
            # environment variable substitution in its parsed configuration.
            # Also remember to write \\ to get a single backslash as output of the YAML parser.
            - replace_pattern(attributes["_k8s_namespace"], "^([^.]+)\\..*$$", "$$1")
            # Remove any "LOCAL_" prefix from the upstream cluster name...
            - replace_pattern(attributes["upstream_cluster.name"], "^LOCAL_", "")
            # ...and potentially use the rest as the service name, if we don't have a good one already.
            - set(resource.attributes["service.name"], attributes["upstream_cluster.name"])
                where ((resource.attributes["service.name"] == nil)
                       or (resource.attributes["service.name"] == "")
                       or (resource.attributes["service.name"] == "OTLPResourceNoServiceName"))
                and (attributes["upstream_cluster.name"] != "local_service")
            # Failing that, use the node_id-derived service name.
            - set(resource.attributes["service.name"], attributes["_k8s_namespace"])
                where ((resource.attributes["service.name"] == nil)
                       or (resource.attributes["service.name"] == "")
                       or (resource.attributes["service.name"] == "OTLPResourceNoServiceName"))
                and (attributes["_k8s_namespace"] != nil) and (attributes["_k8s_namespace"] != "")
  service:
    pipelines:
      metrics:
        receivers:
          - otlp
      traces:
        receivers:
          - otlp
        processors:
          - transform/service_from_upstream_cluster_or_nodeid
          - memory_limiter
          - batch
        exporters:
          - otlp

resources:
  limits:
    cpu: 256m
    memory: 256Mi

# Use the WMF Docker registry, not Docker Hub, and specify our most recent build (overriding the
# appVersion from Chart.yaml).
image:
  repository: docker-registry.discovery.wmnet/otelcol
  tag: 0.81.0-2

command:
  # The chart adds a leading slash (because the default is just "otelcol-contrib" with the binary
  # installed at the root.)
  name: usr/bin/otelcol-contrib

# Disable all ports except OTLP
ports:
  otlp:
    # Disable the hostPort; we'll use a NodePort service instead.
    hostPort: null
  otlp-http:
    # Disable the hostPort; we'll use a NodePort service instead.
    hostPort: null
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false

service:
  enabled: true
  type: ClusterIP
  internalTrafficPolicy: Local

networkPolicy:
  enabled: true
  egressRules:
    - to:
        - ipBlock:
            cidr: 10.2.2.78/32 # jaeger-collector-grpc.svc.eqiad.wmnet
      ports:
        - port: 30443
          protocol: TCP
  extraIngressRules:
    - ports:
      - port: 8888
        protocol: TCP

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"
