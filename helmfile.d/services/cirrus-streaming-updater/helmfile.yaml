helmBinary: helm3
helmDefaults:
  createNamespace: false
  verify: false
  atomic: true
  timeout: 600
  force: false
  args:
    # kubeconfig file can be overwritten using the environment state value kubeConfig (e.g. to deploy to staging-codfw).
    # Use the following example as a reference:
    # helmfile --state-values-set kubeConfig=/path/to/config -e environment apply
    - --kubeconfig
    - {{ .Environment.Values | get "kubeConfig" (printf "/etc/kubernetes/cirrus-streaming-updater-deploy-%s.config" .Environment.Name) }}

templates:
  default: &default
    namespace: cirrus-streaming-updater
    chart: wmf-stable/flink-app
    # Allow to forcibly recreate pods by passing --state-values-set roll_restart=1 on the command line
    recreatePods: {{ if (hasKey .Environment.Values "roll_restart") }}{{ eq .Environment.Values.roll_restart "1" }}{{ else }}false{{end}}
    # This template gets applied for every release, all of which are applied in every environment
    # The installedTemplate line below is how we guarantee we only install the appropriate release in each enviornment.
    # If you don't define environment.values.releases for an environment, this template will fail and raise an error.
    installedTemplate: '{{`{{ if hasKey .Environment.Values "releases" }}{{ has .Release.Name .Environment.Values.releases }}{{ else }}{{ "no releases defined for this environment" | fail }}{{end}}`}}'
    missingFileHandler: Warn
    values:
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml" # general default values, controlled by SRE
      - "values.yaml" # non-env-specific values, in this repository
      - "values-main.yaml" # prod-specific overrides
      - "/etc/helmfile-defaults/private/main_services/cirrus-streaming-updater/{{ .Environment.Name }}.yaml" # prod-specific secrets, controlled by SRE
      - "values-{{ .Environment.Name }}.yaml" # env-specific overrides
      - "values-{{ `{{ .Release.Name }}` }}.yaml" # release-specific overrides
      - "values-{{ `{{ .Release.Name }}` }}-{{ .Environment.Name }}.yaml" # env-and-release-specific overrides
      - environmentName: "{{ .Environment.Name }}"

hooks:
  - events: ["prepare"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{`{{ .Environment.Name }}`}}] START helmfile.d/services/cirrus-streaming-updater: {{`{{.HelmfileCommand}}`}}",
      ]
  - events: ["cleanup"]
    command: "helmfile_log_sal"
    args:
      [
        "{{`{{.HelmfileCommand}}`}}",
        "[{{`{{ .Environment.Name }}`}}] DONE helmfile.d/services/cirrus-streaming-updater: {{`{{.HelmfileCommand}}`}}",
      ]

releases:
  - name: producer
    <<: *default
  - name: consumer-search
    <<: *default
  - name: consumer-cloudelastic
    <<: *default
  - name: consumer-devnull
    <<: *default

environments:
  staging:
    values:
      - releases: [producer, consumer-search, consumer-devnull]
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml"
    missingFileHandler: Warn

  ## eqiad and codfw are configured, as we are figuring out what exactly needs
  ## to be set everywhere, but are not ready for production deployment. Initial
  ## deployment is to be limited to staging. Retained here to explain all the
  ## extra unreferenced values files.

  eqiad:
    values:
      # Add consumer-search once we are ready for a wider rollout
      - releases: [producer, consumer-cloudelastic]
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml"
    missingFileHandler: Warn
  codfw:
    values:
      # Add consumer-search once we are ready for a wider rollout
      - releases: [producer]
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml"
    missingFileHandler: Warn
