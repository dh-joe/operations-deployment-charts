helmBinary: helm3
helmDefaults:
  createNamespace: false
  verify: false
  atomic: true
  timeout: 600
  recreatePods: false
  force: false
  args:
    # kubeconfig file can be overwritten using the environment state value kubeConfig (e.g. to deploy to staging-codfw).
    # Use the following example as a reference:
    # helmfile --state-values-set kubeConfig=/path/to/config -e environment apply
     - "--kubeconfig"
     - {{ .Environment.Values | get "kubeConfig" (printf "/etc/kubernetes/mw-script-deploy-%s.config" .Environment.Name) }}

templates:
  default: &default
    namespace: mw-script
    chart: wmf-stable/mediawiki
    # This template gets applied for every release, all of which are applied in every environment
    # The installedTemplate line below is how we guarantee we only install the appropriate release in each enviornment.
    # If you don't define environment.values.releases for an environment, this template will fail and raise an error.
    installedTemplate: '{{`{{ if hasKey .Environment.Values "releases" }}{{ has .Release.Name .Environment.Values.releases }}{{ else }}{{ "no releases defined for this environment" | fail }}{{end}}`}}'
    # Allow to forcibly recreate pods by passing --state-values-set roll_restart=1 on the command line
    recreatePods: {{ if (hasKey .Environment.Values "roll_restart") }}{{ eq .Environment.Values.roll_restart "1" }}{{ else }}false{{end}}
    missingFileHandler: Warn
    values:
      - /etc/helmfile-defaults/mediawiki/mcrouter_pools.yaml # mcrouter pools, puppet generated
      - /etc/helmfile-defaults/mediawiki/tlsproxy.yaml # discovery listeners
      - /etc/helmfile-defaults/mediawiki/logging.yaml # rsyslog configuration
      - "/etc/helmfile-defaults/general-{{ .Environment.Name }}.yaml"
      - "global.yaml" # common values for all mediawiki deployments
      - "values.yaml" # non-env-specific values, in this repository
      - "/etc/helmfile-defaults/private/main_services/{{`{{ .Release.Namespace }}`}}/{{ .Environment.Name }}.yaml" # prod-specific secrets, controlled by SRE
      - "global-{{ .Environment.Name }}.yaml" # env-specific overrides
      - "values-{{ .Environment.Name }}.yaml" # env-specific overrides
    setTemplate:
      - name: php.servergroup
        value: "kube-{{`{{ .Release.Namespace }}`}}"

# $RELEASE_NAME is generated in the wrapper script mwscript-k8s so that arbitrarily many one-off
# scripts can run at the same time, in the same namespace. The wrapper script is found at
# modules/profile/files/kubernetes/deployment_server/mwscript_k8s.py in the Puppet repo.
releases:
{{- $release_name := env "RELEASE_NAME" }}
{{- if $release_name }}
  - name: {{ $release_name }}
    <<: *default
{{- end }}
  # Since the only real release is dynamically named with an environment variable, CI has nothing
  # to render. This extra release is defined here as a dummy, so that CI can verify the helmfile.
  # But it doesn't actually *work* (and you shouldn't attempt to deploy it) because, as of this
  # writing, we don't configure MediaWiki in staging.
  - name: ci_only_release_do_not_deploy
    <<: *default

environments:
  eqiad:
    values:
      - releases: [{{ $release_name }}]
  codfw:
    values:
      - releases: [{{ $release_name }}]
  # See the comment above at ci_only_release_do_not_deploy; deploying to staging will not work.
  staging:
    values:
      - releases: [ci_only_release_do_not_deploy]
