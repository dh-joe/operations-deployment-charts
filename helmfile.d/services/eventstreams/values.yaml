service:
  deployment: production
  # HTTP port 30892 in chart values.yaml
  routing_tag: eventstreams

networkpolicy:
  egress:
    enabled: true

mesh:
  enabled: true
  # HTTPS port 4892 in chart values.yaml
  telemetry:
    enabled: true

discovery:
  # List of listeners. These should match service mesh endpoint names
  # (defined in https://gerrit.wikimedia.org/g/operations/puppet/+/refs/heads/production/hieradata/common/profile/services_proxy/envoy.yaml)
  listeners:
    - mwapi-async # used for EventStreamConfig API endpoint.
    - schema      # schema.discovery.wmnet

resources:
  replicas: 8

main_app:
  name: eventstreams
  version: 2022-01-20-101239-production

  requests:
    cpu: 200m
    memory: 500Mi
  limits:
    cpu: 1500m
    memory: 1000Mi

  conf:

    kafka:
      # NOTE: The kafka brokers list is set in site specific values files.
      #metadata.broker.list:
      queued.max.messages.kbytes: 32768
      fetch.message.max.bytes: 8388608
      queued.min.messages: 1000
      statistics.interval.ms: 60000
      # Enable Kafka consumer TLS (no authentication, just encryption).
      security.protocol: ssl
      ssl.ca.location: /etc/ssl/certs/wmf-ca-certificates.crt

    # Limit the number of connected clients from the same
    # X-Client-IP per eventstreams process to 2.
    # There are a limited number of connection slots from frontend routers (25 per varnish?).
    # A greedy user could potentially use up all the frontend slots and starve out other clients.
    # If a user is trying to open multiple connections
    # and they happen to be routed to the same worker, they
    # will be denied.  This is unfortunate if the client
    # is only opening a few connections, but they should
    # eventually be able to get through to multiple workers.
    # In prod we run 8 replicas per DC (== # workers, since num_workers: 1).
    # A malfunctioning client could still use up 16 (2*8) total
    # connections, but this should still be less than the total
    # number of frontend connection slots.  This is better
    # than being able to use them all up. :/
    # See also: https://phabricator.wikimedia.org/T226808#5292059
    # (A global counter and limit of client connections per IP would be much better.)
    client_ip_connection_limit: 2

    # Use the EventStreamConfig API to discover streams and topics.
    # Since stream.wikimedia.org is cross DC, it uses the kafka main clusters.
    # As such, it can only possibly expose streams that exist on kafka main,
    # which are all produced via eventgate-main.
    # Only request streams from EventStreamConfig API that have
    # destination_event_service == 'eventgate-main'
    stream_config_uri: 'http://localhost:6500/w/api.php?format=json&action=streamconfigs&constraints=destination_event_service=eventgate-main'
    stream_config_uri_options: {'headers': {'Host': 'meta.wikimedia.org'}}
    stream_config_object_path: streams
    # Since we manually restrict the list of allowed streams, there's no need
    # to refresh stream_config to look for new streams.
    # Set ttl to 0 to only look up stream configs at service start up.
    stream_config_ttl: 0

    # Only these streams will be exposed.
    allowed_streams:
      - mediawiki.page-create
      - mediawiki.page-delete
      - mediawiki.page-move
      - mediawiki.page-undelete
      - mediawiki.page-properties-change
      - mediawiki.page-links-change
      - mediawiki.recentchange
      - mediawiki.revision-create
      - mediawiki.revision-visibility-change
      - mediawiki.revision-score
      - mediawiki.revision-tags-change
      - mediawiki.page_change.v1
      - eventgate-main.test.event
    # Before integrating with EventStreamConfig API,
    # stream route to topic name mapping was explicitly declared here.
    # The routes here did not include the 'mediawiki.' prefix
    # that the streams are actually named with, so we add
    # the previously configured stream route names as
    # stream_aliases for backwards API compatibily.
    # These defaults will be merged in with what is obtained
    # from stream_config_uri.
    stream_config_defaults:
      mediawiki.page-create:
        description: |-
          MediaWiki page create events. This page create stream
          is just the first revision create event for each page.
          As such, it reuses the mediawiki/revision/create schema.
        stream_aliases: [page-create]
      mediawiki.page-delete:
        stream_aliases: [page-delete]
      mediawiki.page-links-change:
        stream_aliases: [page-links-change]
      mediawiki.page-move:
        stream_aliases: [page-move]
      mediawiki.page-properties-change:
        stream_aliases: [page-properties-change]
      mediawiki.page-undelete:
        stream_aliases: [page-undelete]
      mediawiki.recentchange:
        stream_aliases: [recentchange]
      mediawiki.revision-create:
        stream_aliases: [revision-create]
      mediawiki.revision-score:
        description: |-
          MediaWiki revision score events. Every new revision in an
          ORES enabled wiki should have a revision-score event.
          This schema is structured differnetly than ORES API results, as
          event schemas should map well into RDBMS / SQL environments where
          columns must be strongly typed.
          NOTE: Only the most commonly used ORES model scores are included in
          each event (the ones returned by https://ores.wikimedia.org/v3/precache).
        stream_aliases: [revision-score]
      eventgate-main.test.event:
        description: |-
          A test event stream. A new event is posted about once a minute.
        stream_aliases: [test]
