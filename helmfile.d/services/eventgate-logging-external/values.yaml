service:
  deployment: production
  port: 33192

mesh:
  enabled: true
  public_port: 4392 # the port where TLS will be exposed
  resources:
    requests:
      cpu: 500m
      memory: 100Mi
    limits:
      cpu: 1
      memory: 500Mi

resources:
  replicas: 4

main_app:
  name: eventgate-logging-external
  version: 2023-02-14-162241-production
  conf:
    # eventgate-logging-external is used to intake w3c browser reportingapi reports
    # like Network Error Logging.  Since reportingapi is not POSTing via sendBeacon,
    # we need to set access-control-allow-origin: '*'.
    cors: '*'

    # For eventgate-logging-external's incoming requests, the CDN layer performs a
    # GeoIP lookup and attaches a bunch of data as request headers.
    # This attaches those headers to the produced event.
    http_request_headers_to_fields:
      x-geoip-isp: http.request_headers.x-geoip-isp
      x-geoip-organization: http.request_headers.x-geoip-organization
      x-geoip-as-number: http.request_headers.x-geoip-as-number
      x-geoip-country: http.request_headers.x-geoip-country
      x-geoip-subdivision: http.request_headers.x-geoip-subdivision

    kafka:
      conf:
        # NOTE: The kafka brokers list is set in site specific values files.
        #metadata.broker.list:
        # Enforce a smaller message size limit for this externally accessible eventgate instance.
        message.max.bytes: 1048576
        # Enable Kafka producer TLS (no authentication, just encryption).
        security.protocol: ssl

    # The request body is accepted as an array of events, each of which
    # will be an individual message in Kafka.  Each individual
    # message must be smaller than message.max.bytes, but EventGate
    # can accept multiple events at once in the request body.
    # Limit this to a smaller size for this externally accessible eventgate instance.
    max_body_size: 4mb

    schema_base_uris:
    - 'file:///srv/service/schemas/event/primary/jsonschema/'
    schema_precache_uris:
    - /error/1.0.0
    - /test/event/1.0.0
    - /mediawiki/client/error/1.0.0
    - /w3c/reportingapi/network_error/1.0.0

    # Request static stream config during startup from the EventStreamConfig extension
    # MW API endpoint for all streams with destination_event_service == eventgate-logging-external.
    # We use meta.wikimedia.org here as the default stream configuration wiki.
    # Streams can be configured per wiki in mediawiki-config, but they should always be at
    # least configured with a stream name and schema_title available from meta.wikimedia.org.
    # NOTE: Request config from MW internal api.svc and set Host to meta.wikimedia.org.
    stream_config_uri: 'https://api-ro.discovery.wmnet/w/api.php?format=json&action=streamconfigs&constraints=destination_event_service=eventgate-logging-external'
    stream_config_uri_options: {'headers': {'Host': 'meta.wikimedia.org'}}
    # Only request stream configs once at startup.
    stream_config_is_dynamic: false
    # Expect the stream -> settings map in the response at this subobject key
    stream_config_object_path: streams

    # Setting these will instruct eventgate-wikimedia to
    # use the values of these query parameters as defaults
    # for the schema_uri_field and the stream_field if they
    # are not set in the event data.  This allows
    # the stream and schema for an event to be passed in
    # via the URL rather than needing to be in the event in the POST body.
    schema_uri_query_param: schema_uri
    stream_query_param: stream

    # If test_events is set, EventGate will set up a /v1/_test/events
    # route that will process these test_events as if they were POSTed
    # to /v1/events. This is used for the k8s readinessProbe.
    # IMPORTANT:
    # If you are using stream config, make sure this stream is configured!
    # If using local stream config, the _stream-config.yaml template
    # will automatically configure an <main_app.name>.test.event stream,
    # so in your helmfiles you should override this to a test event
    # that prodcues to that stream.  If you are using remote
    # stream config, you must configure these streams explicitly there.
    test_events:
    - $schema: /test/event/1.0.0
      meta:
          # make sure this is configured in stream config if you are using it.
        stream: eventgate-logging-external.test.event

networkpolicy:
  egress:
    enabled: true
    dst_nets:
    - cidr: 10.64.48.66/32 # kafka-logging1003
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.64.131.13/32 # kafka-logging1004
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.64.135.13/32 # kafka-logging1005
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093

    - cidr: 2620:0:861:107:10:64:48:66/128 # kafka-logging1003
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:861:10a:10:64:131:13/128 # kafka-logging1004
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:861:10e:10:64:135:13/128 # kafka-logging1005
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.192.0.94/32 # kafka-logging2001
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:860:101:10:192:0:94/128 # kafka-logging2001
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.192.16.50/32 # kafka-logging2002
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:860:102:10:192:16:50/128 # kafka-logging2002
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.192.32.24/32 # kafka-logging2003
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:860:103:10:192:32:24/128 # kafka-logging2003
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.192.16.38/32 # kafka-logging2004
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:860:102:10:192:16:38/128 # kafka-logging2004
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 10.192.48.85/32 # kafka-logging2005
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    - cidr: 2620:0:860:104:10:192:48:85/128 # kafka-logging2005
      ports:
      - protocol: tcp
        port: 9092
      - protocol: tcp
        port: 9093
    # Allow api-ro
    - cidr: 10.2.2.22/32
      ports:
      - protocol: tcp
        port: 443
    - cidr: 10.2.1.22/32
      ports:
      - protocol: tcp
        port: 443
