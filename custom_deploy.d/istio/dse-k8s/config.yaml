# The baseline for this config was gathered in:
# https://github.com/knative/docs/blob/release-0.18/docs/install/installing-istio.md

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  hub: docker-registry.discovery.wmnet/istio
  tag: 1.9.5-5
  meshConfig:
    # This enables access logging in istio-proxy, which means all sidecars
    # as well as all ingress and egress gateways.
    # https://istio.io/latest/docs/tasks/observability/logs/
    accessLogFile: /dev/stdout
    accessLogEncoding: JSON
    outboundTrafficPolicy:
      mode: 'REGISTRY_ONLY'
  values:
    # CNI-CONFIG:
    # This config is deployed via puppet, the following settings are not really
    # used. They are meant to be used by the install-cni DaemonSet that upstream
    # provides, but that we don't really want to use for security reasons.
    # See the other CNI-CONFIG tags for more info.
    cni:
      cniBinDir: /opt/cni/bin
      cniConfDir: /etc/cni/net.d
      cniConfFileName: 10-calico.conflist
      chained: true
      excludeNamespaces:
        - istio-system
        - kube-system
        - knative-serving
        - cert-manager
    global:
      imagePullPolicy: IfNotPresent
      logAsJson: true
      jwtPolicy: first-party-jwt
      proxy:
        # CNI-CONFIG:
        # The Istio sidecar is meant to support the containers that run
        # after it, and it can't work work with init-containers.
        # In the case of Kserve, every pod runs an init-container
        # called "storage-initializer", that pulls the model binary from
        # Swift and adds it to a volume (to be later used by
        # the kserve-container). The excludeIPRanges setting instructs
        # the iptables rules injected by the CNI when the pods comes up
        # to skip any traffic re-routing for certain IPs (in our case,
        # the Thanos ones).
        excludeIPRanges: "10.2.2.54/32,10.2.1.54/32"
        componentLogLevel: "misc:info"
        logLevel: info
  addonComponents:
    pilot:
      enabled: true
    prometheus:
      enabled: false
    grafana:
      enabled: false
    zipkin:
      enabled: false
  components:
    # CNI-CONFIG:
    # This hack is meant to avoid deploying the install-cni upstream
    # DaemonSet, since we prefer to deploy the cni binaries and config
    # via puppet.
    cni:
      enabled: true
      k8s:
        overlays:
        - apiVersion: apps/v1
          kind: DaemonSet
          name: istio-cni-node
          patches:
          - path: kind
            value: Deployment
          - path: spec.replicas
            value: 0
          - path: spec.strategy
            value:
              type: Recreate
          - path: spec.updateStrategy
    pilot:
      k8s:
        replicaCount: 2
        env:
        - name: 'KUBERNETES_SERVICE_HOST'
          value: 'kubernetes.default.svc.cluster.local'
        - name: 'KUBERNETES_SERVICE_PORT'
          value: '443'
    ingressGateways:
      # This is the default Ingress Gateway installed via istioctl, the one
      # that should be exposed to LVS.
      # The standard ports are defined in https://github.com/istio/istio/blob/master/manifests/charts/gateways/istio-ingress/values.yaml,
      # but we override the list to:
      # 1) Change the default service type from LoadBalancer to NodePort
      # 2) Add fixed nodePort configurations (easier to configure LVS endpoints).
      # 3) Remove config for port 80 since it is not needed. This option has been
      #    temporarily re-enabled to ease testing.
      # 4) Add replicas to istio pods since we don't have autoscaling enabled
      #    (needs a metrics server etc..).
      # Please note that Istio needs specific Gateway, VirtualHost, Routes, etc..
      # configs to implement a L7 reverse proxy, and those needs to be configured
      # separately. In the Kubeflow use case, Knative-serving takes care of these
      # configurations (see the related helm chart).
      - name: istio-ingressgateway
        enabled: true
        k8s:
          overlays:
          - apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
            patches:
            - path: kind
              value: DaemonSet
            - path: spec.updateStrategy
              value:
                rollingUpdate:
                  maxUnavailable: 50%
                type: RollingUpdate
          service:
            type: NodePort
            externalTrafficPolicy: Local
            ports:
            - port: 15021
              targetPort: 15021
              name: status-port
              protocol: TCP
              nodePort: 15021
            - port: 443
              targetPort: 8443
              name: https
              protocol: TCP
              nodePort: 30443
      # This is an internal gateway that is used by Knative. It differs from
      # the main ingressgateway in the following:
      # 1) It doesn't require any TLS specific config since we don't encrypt
      #    traffic inside the Istio mesh.
      # 2) It doesn't need any NodePort configuration since it will not be
      #    exposed to LVS, it only needs to be available inside the k8s cluster.
      - name: cluster-local-gateway
        enabled: true
        label:
          istio: cluster-local-gateway
          app: cluster-local-gateway
        k8s:
          overlays:
          - apiVersion: apps/v1
            kind: Deployment
            name: cluster-local-gateway
            patches:
            - path: kind
              value: DaemonSet
            - path: spec.updateStrategy
              value:
                rollingUpdate:
                  maxUnavailable: 50%
                type: RollingUpdate
          replicaCount: 2
          service:
            type: ClusterIP
            ports:
            - port: 15021
              targetPort: 15021
              name: status-port
            - port: 80
              name: http2
              targetPort: 8080
            - port: 443
              name: https
              targetPort: 8443
