apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  hub: docker-registry.discovery.wmnet/istio
  tag: 1.15.7-2
  meshConfig:
    # This enables access logging in istio-proxy, which means all sidecars
    # as well as all ingress and egress gateways.
    # https://istio.io/latest/docs/tasks/observability/logs/
    accessLogFile: /dev/stdout
    accessLogEncoding: JSON
  components:
    base:
      enabled: true
    pilot:
      enabled: true
    cni:
      enabled: false
    egressGateways:
      - enabled: false
        name: istio-egressgateway
    ingressGateways:
      - enabled: true
        name: istio-ingressgateway
        k8s:
          overlays:
          - apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
            patches:
            - path: kind
              value: DaemonSet
            # Delete spec.strategy
            # https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/#K8sObjectOverlay-PathValue
            - path: spec.strategy
              value:
            - path: spec.update
              value:
            - path: spec.updateStrategy
              value:
                rollingUpdate:
                  maxUnavailable: 50%
                type: RollingUpdate
    istiodRemote:
      enabled: false
  values:
    global:
      istioNamespace: istio-system
      jwtPolicy: third-party-jwt
      # Use the Mesh Control Protocol (MCP) for configuring Mixer and Pilot. Requires galley (--set galley.enabled=true).
      useMCP: false
      logAsJson: true
      logging:
        # Default: default:info
        level: default:info
      # TODO: Figure this out
      pilotCertProvider: istiod
      priorityClassName: "system-cluster-critical"
      proxy:
        autoInject: disabled
        # Log level for proxy, applies to gateways and sidecars.
        # Expected values are: trace|debug|info|warning|error|critical|off
        # Default: warning
        logLevel: warning
    pilot:
      autoscaleEnabled: false # overwritten
      replicaCount: 2
    gateways:
      istio-ingressgateway:
        name: istio-ingressgateway
        autoscaleEnabled: false # overwritten
        type: NodePort # overwritten
        externalTrafficPolicy: Local
        env:
          # Enable additional envoy native metrics (https://github.com/istio/istio/wiki/Envoy-native-telemetry)
          # Since ingress gateway does not use the sidecar injector, this needs to be configured using environment variable.
          ISTIO_METAJSON_STATS: |
            {\"sidecar.istio.io/statsInclusionSuffixes\": \"upstream_rq_1xx,upstream_rq_2xx,upstream_rq_3xx,upstream_rq_4xx,upstream_rq_5xx,upstream_rq_time,upstream_cx_tx_bytes_total,upstream_cx_rx_bytes_total,upstream_cx_total,downstream_rq_1xx,downstream_rq_2xx,downstream_rq_3xx,downstream_rq_4xx,downstream_rq_5xx,downstream_rq_time,downstream_cx_tx_bytes_total,downstream_cx_rx_bytes_total,downstream_cx_total\"}
        # Need to list all ports here to be able to provide static nodePorts
        ports:
          - port: 80
            targetPort: 8080
            name: http2
            protocol: TCP
            nodePort: 30080
          - port: 443
            targetPort: 8443
            name: https
            protocol: TCP
            nodePort: 30443
          # This is the port where sni routing happens
          - port: 15443
            targetPort: 15443
            name: tls
            protocol: TCP
            nodePort: 31443
