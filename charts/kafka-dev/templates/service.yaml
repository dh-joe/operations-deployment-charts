apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  type: NodePort
  ports:
  - name: zookeeper
    port: 2181
    targetPort: 2181
  selector:
    app: zookeeper

---
# Kafka is configured with internal and external listeners.
# We need Kafka to know how to map from each cluster port to a port it actually exposes.
# It does this by mapping the incoming port number to an advertised.listener.
# This means that even though we can use different advertised hostnames
# in advertised listeners, the ports must be the same all the way through
# from client to pod to container/kafka.
#
# Note that we don't technically need this Service for Kafka to work.
# This service exists so that Kafka clients in k8s can address the Kafka Pod
# by a name: 'kafka.<namespace>.svc.cluster.local:<kafka_internal_port>'.
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  type: ClusterIP
  # This is a 'headless' service; no Cluster IP for the service is created.
  # Inside the k8s cluster, we want to use the pod IPs
  # because Kafka does its own load balancing.
  clusterIP: None
  selector:
    app: kafka
  ports:
    - name: kafka-internal
      protocol: TCP
      targetPort: {{ .Values.kafka_internal_port | default 9092 }} # container (broker) port
      port: {{ .Values.kafka_internal_port | default 9092 }}       # cluster (pod) port

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-external
spec:
  # The external port is a NodePort because we want to
  # expose the kafka_advertised_host (EXTERNAL listener) to
  # requests from outside of the node.
  type: NodePort
  selector:
    app: kafka
  ports:
    - name: kafka-external
      protocol: TCP
      targetPort: {{ .Values.kafka_external_port | default 30092 }} # container (broker) port
      port: {{ .Values.kafka_external_port | default 30092 }}       # cluster (pod) port
      nodePort: {{ .Values.kafka_external_port | default 30092 }}       # cluster (pod) port
