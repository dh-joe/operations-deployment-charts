apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "base.name.release" . }}
  labels:
    app: {{ template "base.name.chart" . }}
    chart: {{ template "base.name.chartid" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "base.name.chart" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.resources.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "base.name.chart" . }}
        release: {{ .Release.Name }}
        routed_via: {{ .Values.routed_via | default .Release.Name }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        prometheus.io/port: {{ .Values.app.port | quote }}
        prometheus.io/scrape: "true"
        {{- include "mesh.name.annotations" . | indent 8}}
    spec:
      {{- if .Values.affinity }}
      {{- toYaml .Values.affinity | nindent 6 }}
      {{- end }}
      containers:
        # The main application container
        - name: {{ template "base.name.release" . }}
          image: "{{ .Values.docker.registry }}/{{ .Values.main_app.image }}:{{ .Values.main_app.version }}"
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          {{- if .Values.main_app.command }}
          command:
            {{- range .Values.main_app.command }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.main_app.args }}
          args:
            {{- range .Values.main_app.args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.app.port }}
          {{- if .Values.debug.enabled }}
          {{- range .Values.debug.ports }}
            - containerPort: {{ . }}
          {{- end }}{{ end }}
          {{- if .Values.main_app.liveness_probe }}
          livenessProbe:
          {{- toYaml .Values.main_app.liveness_probe | nindent 12 }}
          {{- end }}
          {{- if .Values.main_app.readiness_probe }}
          readinessProbe:
          {{- toYaml .Values.main_app.readiness_probe | nindent 12 }}
          {{- end }}
          env:
            - name: SERVICE_IDENTIFIER
              value: {{ template "base.name.release" . }}
            - name: CONFIG_PATH
              value: /etc/similar-users/config.yaml
            # required to pass cert validation when connecting to mwapi discovery endpoint
            - name: REQUESTS_CA_BUNDLE
              value: /etc/similar-users/puppetca.crt.pem
            - name: GUNICORN_CMD_ARGS
              value: "--timeout {{ .Values.main_app.worker_timeout }} {{ .Values.main_app.gunicorn_args }}"
          {{- range $k, $v := .Values.config.public }}
            - name: {{ $k | upper }}
              value: {{ $v | quote }}
          {{- end }}
          {{- range $k, $v := .Values.config.private }}
            - name: {{ $k | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "base.name.release" $ }}-secret-config
                  key: {{ $k }}
          {{- end }}
          resources:
            requests:
{{ toYaml .Values.main_app.requests | indent 14 }}
            limits:
{{ toYaml .Values.main_app.limits | indent 14 }}
          volumeMounts:
            - name: {{ .Release.Name }}-base-config
              mountPath: /etc/similar-users/
{{- with .Values.main_app.volumeMounts }}
{{ toYaml . | indent 12 }}
{{- end }}
        {{- include "mesh.deployment.container" . | indent 8}}
{{- if or .Values.main_app.volumes .Values.mesh.enabled }}
      volumes:
        {{- include "mesh.deployment.volume" . | indent 8}}
        - name: {{ .Release.Name }}-base-config
          configMap:
            name: {{ template "base.name.release" . }}-base-config
{{- with .Values.main_app.volumes }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
