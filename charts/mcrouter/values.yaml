
# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
monitoring:
  # If enabled is true, monitoring annotations will be added to the deployment.
  enabled: false
service:
  deployment: minikube # valid values are "production" and "minikube"
  port:
    name: mcrouter
    targetPort: 4442 # the number or name of the exposed port on the container
    port: 4442 # the number of the port desired to be exposed to the cluster
    nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate
config:
  public: {} # Add here all the keys that can be publicly available as a ConfigMap
  private: {} # Add here all the keys that should be private but still available as env variables
# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  ports: []
common_images:
  mcrouter:
    mcrouter: latest
    exporter: latest

cache:
  mcrouter:
    enabled: true
    port: 4442
    # This is the route prefix that will be added by default
    # to all requests whose key doesn't begin with /
    route_prefix: /default
    cross_region_timeout: 250
    cross_cluster_timeout: 100
    num_proxies: 3
    probe_timeout: 6000
    timeouts_until_tko: 3
    zone: foo
    resources:
      requests:
        cpu: 250m
        memory: 200M
      limits:
        cpu: 250m
        memory: 200M
    pools:
      - name: foo-pool
        servers:
          - 192.168.1.1
          - 192.168.1.2
        failover:
          - 192.168.1.54
          - 192.168.1.53
        zone: foo
      - name: bar-pool
        servers:
          - 192.168.2.1
          - 192.168.2.2
        failover:
          - 192.168.2.54
          - 192.168.2.53
    routes:
      # Route 1: simple standalone
      - route: /default
        pool: foo-pool
        failover_time: 0
      # Route 2: "replica"
      # Actually generates two routes,
      # * /replica/foo that reads and writes to the foo pools
      # * /replica/bar that reads from foo and writes to bar
      # Applications can write to both using /replica/*/ as a
      # prefix.
      - route: /replica/foo
        pool: foo-pool
        failover_time: 10
        replica:
          route: /replica/bar
          pool: bar-pool
      # Route 3: "warmup"
      # This route will try reading a key from the local pool, and
      # if it doesn't find it, it will contact the bar pool and store
      # the resulting key for the ttl time
      - route: /multilayer
        pool: bar-pool
        failover_time: 10
        warmup:
          pool: foo-pool
          ttl: 60
    exporter:
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    service:
      enabled: true

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
monitoring:
  enabled: false
networkpolicy:
  egress:
    enabled: false


