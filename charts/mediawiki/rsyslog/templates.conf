# output template used when writing syslog events to kafka. some hints:
#   option.jsonf - format the string as JSON object. This means a leading and trailing curly brace “{”
#                  will be added as well as a comma between all non-terminal properties and constants.
#   name         - rsyslog property name
#   outname      - field name to use when output as json
#   format       - "jsonf" formats as a complete json field
#
#   see https://www.rsyslog.com/doc/v8-stable/configuration/templates.html for additional details
#

# Template for apache access logs. We receive them in ECS format, so we just need to inject the kubernetes
# stuff here.
# The template cannot use option.json="on" or "$!all-json" property would be json-escaped
template(name="ecs_1110_k8s" type="list") {
  constant(value="{")
  # Add the kubernetes-specific data we're collecting
  constant(value="\"host\": {")
  constant(value="\"name\":\"")
  constant(value=`echo $KUBERNETES_NODE`)
  # Close host hash
  constant(value="\"}, ")
  constant(value="\"orchestrator\": {")
  constant(value="\"type\": \"kubernetes\",")
  constant(value="\"namespace\":\"")
  constant(value=`echo $KUBERNETES_NAMESPACE`)
  constant(value="\", ")
  constant(value="\"resource\": {")
  constant(value="\"name\":\"")
  constant(value=`echo $KUBERNETES_POD_NAME`)
  # Close nested resource hash
  constant(value="\"}")
  # Close orchestrator hash
  constant(value="}, ")
  constant(value="\"labels\": {")
  constant(value="\"deployment\":\"")
  constant(value=`echo $KUBERNETES_DEPLOYMENT`)
  constant(value="\", ")
  constant(value="\"release\":\"")
  constant(value=`echo $KUBERNETES_RELEASE`)
  constant(value="\"")
  # Close labels hash
  constant(value="}, ")
  # Skip leading curly brace
  property(name="$!all-json" position.from="2")
}

# Template for treating php-fpm slowlogs. Tentatively ECS-compatible.
template(name="slowlog" type="list") {
  constant(value="{")
  property(name="timereported" outname="timestamp" format="jsonf" dateformat="rfc3339")
  constant(value=", ")
  property(name="hostname"            outname="host.name"                format="jsonf")
  constant(value=", ")
  property(name="syslogseverity"      outname="log.syslog.severity.code" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity-text" outname="log.syslog.severity.name" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity-text" outname="log.level"                format="jsonf")
  constant(value=", ")
  property(name="syslogfacility"      outname="log.syslog.facility.code" format="jsonf")
  constant(value=", ")
  property(name="syslogfacility-text" outname="log.syslog.facility.name" format="jsonf")
  constant(value=", ")
  property(name="pri"                 outname="log.syslog.priority"      format="jsonf")
  constant(value=", ")
  property(name="programname"         outname="service.type"             format="jsonf")
  constant(value=", ")
  constant(value="1.11.0"              outname="ecs.version"              format="jsonf")
  constant(value=", ")
  property(name="$!script_filename" outname="log.origin.file.name" format="jsonf")
  constant(value=", ")
  # Add the kubernetes-specific data we're collecting
  constant(value="\"host\": {")
  constant(value="\"name\":\"")
  constant(value=`echo $KUBERNETES_NODE`)
  # Close host hash
  constant(value="\"}, ")
  constant(value="\"orchestrator\": {")
  constant(value="\"type\": \"kubernetes\",")
  constant(value="\"namespace\":\"")
  constant(value=`echo $KUBERNETES_NAMESPACE`)
  constant(value="\", ")
  constant(value="\"resource\": {")
  constant(value="\"name\":\"")
  constant(value=`echo $KUBERNETES_POD_NAME`)
  # Close nested resource hash
  constant(value="\"}")
  # Close orchestrator hash
  constant(value="}, ")
  constant(value="\"labels\": {")
  constant(value="\"deployment\":\"")
  constant(value=`echo $KUBERNETES_DEPLOYMENT`)
  constant(value="\", ")
  constant(value="\"release\":\"")
  constant(value=`echo $KUBERNETES_RELEASE`)
  constant(value="\"")
  # Close labels hash
  constant(value="}, ")
  # Add a field that we will be able to index indicating the file:line:function of the top element of the stack trace
  # Here we escape values using the jsonr formatter to avoid invalid escape sequence errors due to php use of backslash for
  # namespacing.
  constant(value="\"error\": { \"stack_head\": \"")
  property(name="$!stacktrace[0]!file" format="jsonr")
  constant(value=":")
  property(name="$!stacktrace[0]!line" format="jsonr")
  constant(value=":")
  property(name="$!stacktrace[0]!function" format="jsonr")
  constant(value="\", \"stack_trace\": ")
  # Add the full stacktrace. do not format it as it's already in json format being a data structure.
  property(name="$!stacktrace")
  constant(value="}, \"process\": {")
  property(name="$!pid" outname="pid" format="jsonf")
  constant(value="}")
  constant(value="}\n")
}

# Append all properties found by mmjsonparse to "standard" syslog_json fields
# The template cannot use option.json="on" or "$!all-json" property would be json-escaped
template(name="syslog_cee" type="list") {
  constant(value="{")
  property(name="timereported" outname="timestamp" format="jsonf" dateformat="rfc3339")
  constant(value=", ")
  property(name="hostname" outname="logsource" format="jsonf")
  constant(value=", ")
  property(name="hostname" outname="host" format="jsonf")
  constant(value=", ")
  property(name="programname" outname="program" format="jsonf")
  constant(value=", ")
  property(name="syslogseverity-text" outname="severity" format="jsonf")
  constant(value=", ")
  property(name="syslogfacility-text" outname="facility" format="jsonf")
  constant(value=", ")
  # Add the kubernetes-specific data we're collecting
  constant(value="\"kubernetes\": {")
  constant(value="\"host\":\"")
  constant(value=`echo $KUBERNETES_NODE`)
  constant(value="\", ")
  constant(value="\"namespace_name\":\"")
  constant(value=`echo $KUBERNETES_NAMESPACE`)
  constant(value="\", ")
  constant(value="\"pod_name\":\"")
  constant(value=`echo $KUBERNETES_POD_NAME`)
  constant(value="\", ")
  constant(value="\"labels\": {")
  constant(value="\"deployment\":\"")
  constant(value=`echo $KUBERNETES_DEPLOYMENT`)
  constant(value="\", ")
  constant(value="\"release\":\"")
  constant(value=`echo $KUBERNETES_RELEASE`)
  constant(value="\"")
  # Close the labels and kubernetes hashes
  constant(value="}}, ")
  # Skip leading curly brace
  property(name="$!all-json" position.from="2")
}

# Template that is useful to debug issues with mmnormalize
template(name="unparsed" type="list") {
  constant(value="{")
  property(name="$!unparsed-data" outname="unparsed" format="jsonf")
  constant(value=", ")
  property(name="$!originalmsg" outname="raw" format="jsonf")
  constant(value="}")
}
