apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  {{- include "base.meta.metadata" (dict "Root" .) | indent 2 }}
spec:
  podSelector:
    matchLabels:
      app: {{ template "base.name.chart" . }}
      release: {{ .Release.Name }}
  policyTypes:
  {{- if .Values.networkpolicy.egress.enabled }}
    - Egress
  {{- end }}
    - Ingress
  ingress:
    - ports:
      {{- include "app.generic.networkpolicy_ingress" . | indent 6 -}}
      {{- include "mesh.networkpolicy.ingress" . | indent 6 }}
{{- if .Values.networkpolicy.egress.enabled }}
  egress:
    {{- include "base.networkpolicy.egress-basic" .Values }}
    {{- include "base.networkpolicy.egress.kafka" . | indent 4 }}
    {{- include "base.networkpolicy.egress.mariadb" . | indent 4 }}
    {{- include "base.networkpolicy.egress.zookeeper" . | indent 4 }}
    {{- include "mesh.networkpolicy.egress" . | indent 4 }}
{{- end }}

---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-webserver-ingress
spec:
  types:
    - Ingress
  selector: "app == 'airflow' && component == 'webserver'"
  ingress:
    - action: Allow
      protocol: TCP
      destination:
        ports:
        - {{ $.Values.app.port }}


{{- if $.Values.scheduler.enabled }}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-scheduler-ingress
spec:
  types:
    - Ingress
  selector: "app == 'airflow' && component == 'scheduler'"
  ingress:
    - action: Allow
      protocol: TCP
      destination:
        ports:
        {{- if eq $.Values.config.airflow.config.core.executor "LocalExecutor" }}
        - {{ $.Values.scheduler.local_executor_api_port }}
        {{- end }}
        - {{ $.Values.config.airflow.config.scheduler.scheduler_health_check_server_port }}
        {{- if $.Values.monitoring.enabled }}
        - {{ $.Values.monitoring.prometheus_port }}
        {{- end }}

{{- if contains "KubernetesExecutor" $.Values.config.airflow.config.core.executor }}
{{/*
  When using the Kubernetes executor, the scheduler needs to have access to the kube API
  to manage tasks via Pod resources, and the webserver needs to be able to tail the logs
  of running Pods.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-to-kubeapi
spec:
  types:
    - Egress
  selector: "app == 'airflow' && component in { 'scheduler', 'webserver' }"
  egress:
    - action: Allow
      destination:
        services:
          name: kubernetes
          namespace: default

{{/*
  Tasks may now be exectuted with the KubernetesPodOperator or the SpakrKubernetesOperator.
  These task-pods need to be able to access the Kubernetes API. The operators themselves add
  a label to indicate that they were executed using this.
*/}}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.name.release" . }}-task-pods-to-kubeapi
spec:
  types:
    - Egress
  selector: >
    app == 'airflow' && component == 'task-pod' && operator in (
      'KubernetesPodOperator',
      'KubernetesJobOperator',
      'KubernetesDeleteJobOperator',
      'KubernetesPatchJobOperator',
      'SparkKubernetesOperator' )
  egress:
    - action: Allow
      destination:
        services:
          name: kubernetes
          namespace: default
{{- end }}
{{- end }}
{{/*
== NetworkPolicy resources associated with external (aka not running in Kubernetes) services.

These resources are scoped to a particular airflow component (scheduler, webserver, etc)

*/}}
{{- if $.Values.external_services }}
{{- range $component, $externalServices := $.Values.external_services }}
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: {{ template "base.meta.name" (dict "Root" $) }}-egress-external-services-{{ $component }}
  {{- include "base.meta.labels" $ | indent 2 }}
  namespace: {{ $.Release.Namespace }}
spec:
  selector: "app == '{{ template "base.name.chart" $ }}' && release == '{{ $.Release.Name }}' && component == '{{ $component }}'"
  types:
  - Egress
  egress:
    {{- range $serviceType, $serviceNames := $externalServices }}
    {{- if $serviceNames }}
    {{- range $serviceName := $serviceNames }}
    - action: Allow
      destination:
        services:
          name: {{ $serviceType }}-{{ $serviceName }}
          namespace: external-services
    {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
{{- end }}
