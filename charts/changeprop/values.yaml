# This can be useful when backporting fixes.
helm_scaffold_version: 0.1

docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent

resources:
  replicas: 1

main_app:
  image: wikimedia/mediawiki-services-change-propagation
  # See https://tools.wmflabs.org/dockerregistry/wikimedia/mediawiki-services-change-propagation/tags/ for available versions
  # Use latest in defaults and replace in the production files with the correct tag.
  version: latest
  # port exposed as a Service, also used by service-checker.
  port: 7272
  command: ["node"]
  args: ["server.js", "-c", "/etc/changeprop/config.yaml"]
  requests:
    cpu: 500m
    memory: 300Mi
  limits:
    cpu: 1
    memory: 600Mi
  liveness_probe:
    tcpSocket:
      port: 7272
    initialDelaySeconds: 60

  concurrency: 50

  # Log threshold. Defaults info in template if not defined here
  log_level: debug

  proxy:

  site: datacenter1

  changeprop:

    domain_zone: org

    event_service_uri: localhost:32192/v1/events

    rerendered_pcs_endpoints:
      - mobile-sections
      - media-list
      - mobile-html

    # Replace the Mediawiki URI with the correct K8s URI
    mwapi_uri: http://localhost/w/api.php

    # Replace the Restbase URI with the correct K8s URI
    restbase_uri: http://localhost:7231

    # Ores pre-caching URIs
    ores:
      uris:
        - http://localhost

    features:
      # null edit uses features of mw_purge - also includes on_wikidata_description_change
      mw_purge_null_edit: true
      summary_definition_rerender: false
      purge_varnish: false
      page_edit: false
      revision_visibility_change: false
      page_delete: false
      page_restore: false
      page_move: false
      on_transclusion_update: false
      page_create: false
      on_backlinks_update: false
      ores_cache: false
      wikidata_description_on_edit: false
      wikidata_description_on_undelete: false
      page_images_summary: false
      page_images_mobile: false
      rerendered_pcs_endpoints: false

  # if jobqueue is true, then we'll configure our pod as a
  # changeprop-jobqueue instance. If it's false, we'll assume that
  # we're doing regular changeprop.
  jobqueue: {}

  purge_stream: resource-purge

  # kafka
  kafka:
    broker_list:
      - localhost
    max_bytes: 4194304
    compression_codec: snappy
    ssl: false

  # redis
  redis:
    host: 127.0.0.1
    port: 6379
    pass:


nutcracker:
  enabled: false
  version: latest # But lock this down to a specific version in production
  servers: [] # The form is <IP>:<port>:<db> "name" for each element

subcharts:
  # Set this to true during local minikube development to get a Kafka pod deployed.
  # You only need to do this if you don't manually install the kafka-dev chart.
  kafka: false

# metrics
metrics:
  name: changeprop
  host: localhost
  port: 9125

# monitoring
monitoring:
    enabled: false
    image_version: latest

service:
  name: changeprop
  # valid values are "production" and "minikube"
  deployment: "minikube"
  port:
    name: changeprop
    targetPort: 7272
    port: 7272
    nodePort: null

config:
  # Add here all the keys that can be publicly available as a ConfigMap
  public: {}
  # Add here all the keys that should be private but still available as env variables
  private: {}

tls:
  enabled: false
  image_version: latest
  # the port where TLS will be exposed
  public_port: 2345
  certs: {}
# Add here, via our "secret" system, the cert/key pairs
#    cert: "your cert here"
#    key: "your key here"

# Additional resources if we want to add a port for a debugger to connect to.
debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []
