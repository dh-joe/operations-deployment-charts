helm_scaffold_version: 0.2
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  # We use envoy-future here for more recent versions of envoy than
  # are used widely across WMF infrastructure.
  image: envoy-future
  version: latest
  port: 8087
  command: ["/usr/bin/envoy"]
  args: ["-c", "/etc/api-gateway/config.yaml", "-l", "debug"]
  requests:
    cpu: 500m
    memory: 500Mi
  limits:
    cpu: 1
    memory: 800Mi
  liveness_probe:
    tcpSocket:
      port: 8087

  # idle connection timeout to backend clusters - low to limit issues
  # with connection reuse
  idle_timeout: 5s
  # If set to true, expose a telemetry port that offers stats and
  # health endpoint. Enables but does not expose the admin port internally
  telemetry_port: null
  jwt:
    enabled: false
    # String that matches the "iss" field in a JWT *EXACTLY* - be
    # careful with leading "https://" and trailing "/"
    issuer: null

  # if true, enable a debug server that echoes requests - see README.md
  http_https_echo: false
  ratelimiter:
    enabled: false
    # image version
    version: latest
    anon_limit:
      requests_per_unit: 500
      unit: HOUR
    default_limit:
      requests_per_unit: 5000
      unit: HOUR
  # Type of access logging
  # - false to turn off access logging
  # - { type: stdout } for access logging to stdout
  # - {
  #     type: eventgate,
  #     event_service: {host: eventgate.discovery.wmnet, port:80, path: /v1/events},
  #     image_version: latest
  #     debug: true
  #   }
  #   to send access logs to an eventgate instance.
  access_log:
    type: stdout

  # Explicitly strip cookies from API route requests and responses -
  # don't strip cookies from /wiki/ and other endpoints.
  strip_api_cookies: false

  # populated from secrets - JSON web key sets
  jwks:
    kid: ""
    key: ""

  endpoints:
    # for /core/ URLs
    mwapi_cluster:
      type: LOGICAL_DNS
      hosts: {}
      # Specifies the host to support debug routing to via X-Wikimedia-Debug
      debug_hosts: {}
    # used for /feed/
    restbase_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used for descriptions
    mobileapps_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used to serve the API portal
    appserver_cluster:
      type: LOGICAL_DNS
      hosts: {}
      debug_hosts: {}
    # Hosts with $service.discovery.wmnet records
    # Note that discovery_hosts behaves differently to the hosts dictionaries above.
    # the format of each entry is:
    # myservice.discovery.wmnet:
    #   tls: true
    #   port: 12345
    #   path: myservicename
    # This will map api.wikimedia.org/service/myservicename/v1 to
    # myservice.discovery.wmnet:12345 internally.
    discovery_endpoints: {}

  # run a local redis container for testing - see README for
  # instructions
  dev_redis: false

  # domains that the API Gateway will answer for. Be sure to set your
  # Host headers accordingly.
  domains:
    - localhost
    - localhost:*
    - 127.0.0.1
    - 127.0.0.1:*

  # This map maps URLs that will be requested of api.wikimedia.org to
  # a *path* that is requested of the appservers. The map key is a
  # api.wikimedia.org/{path} regex match. Path property is a regex
  # substitution to compute the appserver path, and 'host' property
  # is a regex substitution used to compute the host header value
  # to send to the appserver.
  #TODO regex on v1
  pathing_map:
    '/core/v1/wikipedia/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikipedia.org'
    '/core/v1/wiktionary/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wiktionary.org'
    '/core/v1/commons/(.*)':
      path: '/w/rest.php/v1/\1'
      host: 'commons.wikimedia.org'
    '/core/v1/wikibooks/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikibooks.org'
    '/core/v1/wikiquote/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikiquote.org'
    '/core/v1/wikiversity/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikiversity.org'
    '/core/v1/mediawiki/(.*)':
      path: '/w/rest.php/v1/\1'
      host: 'www.mediawiki.org'
    '/core/v1/wikidata/(.*)':
      path: '/w/rest.php/v1/\1'
      host: 'www.wikidata.org'
    '/core/v1/wikisource/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikisource.org'
    '/core/v1/wikivoyage/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikivoyage.org'
    '/core/v1/meta/(.*)':
      path: '/w/rest.php/v1/\1'
      host: 'meta.wikimedia.org'
    '/core/v1/wikinews/(\w+)/(.*)':
      path: '/w/rest.php/v1/\2'
      host: '\1.wikinews.org'
    '/core/v1/wikispecies/(.*)':
      path: '/w/rest.php/v1/\1'
      host: 'species.wikimedia.org'

nutcracker:
  enabled: false
  version: latest
  port: 6379
  servers: [] # The form is <IP>:<port>:<db> "name" for each element


monitoring:
  enabled: false
  image_version: latest

service:
  deployment: minikube
  port:
    name: api-gateway
    targetPort: 8087
    port: 8087
    nodePort: null
config:
  public: {}
  private: {}

tls:
  enabled: false
  certs:
    cert: "snakeoil"
    key: "snakeoil"

debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

networkpolicy:
  egress:
    enabled: false
