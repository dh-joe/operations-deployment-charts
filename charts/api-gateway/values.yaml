helm_scaffold_version: 0.2
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1
main_app:
  # We use envoy-future here for more recent versions of envoy than
  # are used widely across WMF infrastructure.
  image: envoy-future
  version: latest
  port: 8087
  command: ["/usr/bin/envoy"]
  args: ["-c", "/etc/api-gateway/config.yaml"]
  requests:
    cpu: 500m
    memory: 500Mi
  limits:
    cpu: 1
    memory: 800Mi
  liveness_probe:
    tcpSocket:
      port: 8087

  # idle connection timeout to backend clusters - low to limit issues
  # with connection reuse
  idle_timeout: 5s
  # If set to true, expose a telemetry port that offers stats and
  # health endpoint. Enables but does not expose the admin port internally
  telemetry_port: null
  jwt:
    enabled: false
    # String that matches the "iss" field in a JWT *EXACTLY* - be
    # careful with leading "https://" and trailing "/"
    issuer: null

  # if true, enable a debug server that echoes requests - see README.md
  http_https_echo: false
  ratelimiter:
    enabled: false
    # image version
    version: latest
    anon_limit:
      requests_per_unit: 500
      unit: HOUR
    default_limit:
      requests_per_unit: 5000
      unit: HOUR
  # Type of access logging
  # - false to turn off access logging
  # - { type: stdout } for access logging to stdout
  # - {
  #     type: eventgate,
  #     event_service: {host: eventgate.discovery.wmnet, port:80, path: /v1/events},
  #     image_version: latest
  #     debug: true
  #   }
  #   to send access logs to an eventgate instance.
  access_log:
    type: stdout

  # Explicitly strip cookies from API route requests and responses -
  # don't strip cookies from /wiki/ and other endpoints.
  strip_api_cookies: false

  # populated from secrets - JSON web key sets
  jwks:
    kid: ""
    key: ""

  endpoints:
    # for /core/ URLs
    mwapi_cluster:
      type: LOGICAL_DNS
      hosts: {}
      # Specifies the host to support debug routing to via X-Wikimedia-Debug
      debug_hosts: {}
    # used for /feed/
    restbase_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used for descriptions
    mobileapps_cluster:
      type: LOGICAL_DNS
      hosts: {}
    # used to serve the API portal
    appserver_cluster:
      type: LOGICAL_DNS
      hosts: {}
      debug_hosts: {}
  # Hosts with $service.discovery.wmnet records
  # Note that discovery_hosts behaves differently to the hosts dictionaries above.
  # the format of each entry is:
  # myservice:
  #   tls: true
  #   port: 12345
  #   path: myservicename
  #   ratelimit_config: # optional
  #     anon_limit: 1234
  #     default_limit: 12345
  #   host: myrewrittenhostname.wikimedia.org # optional
  #   internal_host: myserviceinternalname.discovery.wmnet # optional
  # This will map api.wikimedia.org/service/myservicename to
  # myserviceinternalname.discovery.wmnet:12345 internally.

  # If internal_host is not specified, myservice.discovery.wmnet will be used as a default
  # ratelimit_config is optional and is used to override the global rate limits

  # "host" is an optional parameter to rewrite the Host header from
  # api.wikimedia.org to whatever is specified. Used for when a
  # service only responds when a particular Host header is
  # expected. If not specified, the header is unchanged.

  # "host_rewrite_path" can be specified instead of "host" in order to
  # do a regex replacement between the path and the internal host
  # header using a SINGLE group. More than one group is not supported
  # at this time, and using more than one will break routing.
  #
  # For example, for a path of "abc(a|b)" and a host_rewrite_path of
  # "servicename-\1.wikimedia.org", requests to the path
  # /service/abca/1234 will be requested internally with a host header
  # of servicename-a.wikimedia.org. The internal service request will
  # have a path of /1234 as normal.

  # "full_path_trim" is a special option for services (such as
  # liftwing) that will maintain the full query string (as opposed to
  # using everything after the matching url path) when querying the
  # backend service while trimming the specified value.
  #
  # This would mean that
  # * a "full_path_trim" of "/service/mygroup"
  # * a service path of "/service/mygroup/mything"
  # * a query string of "/service/mygroup/mything/12345
  # would cause the backend service to be queried for /mything/12345.
  #
  # To contrast, not specifying a full_path_trim will cause this query
  # and service path combination resulting in the backend query being
  # /12345.
  #
  # full_path_trim will override host_rewrite_path parsing of paths,
  # but host_rewrite_path will still function for rewriteing of Host
  # headers.

  discovery_endpoints: {}

  # This dictionary behaves the exact same but only for the staging
  # instance of the gateway and for
  # https://staging.svc.eqiad.wmnet:8087/staging/myservicename on the internal
  # wmf network
  staging_endpoints: {}

  # run a local redis container for testing - see README for
  # instructions
  dev_redis: false

  # domains that the API Gateway will answer for. Be sure to set your
  # Host headers accordingly.
  domains:
    - localhost
    - localhost:*
    - 127.0.0.1
    - 127.0.0.1:*

  # This map maps URLs that will be requested of api.wikimedia.org to
  # a *path* that is requested of the appservers. The map key is a
  # api.wikimedia.org/{path} regex match. Path property is a regex
  # substitution to compute the appserver path, and 'host' property
  # is a regex substitution used to compute the host header value
  # to send to the appserver.
  #Example:
  #pathing_map:
  #  mwapi_cluster:
  #    '/core/v1/localtesting/(\w+)/(.*)':
  #      path: '/w/rest.php/v1/\2'
  #      host: '\1.wikipedia.org'

  pathing_map: {}

nutcracker:
  enabled: false
  port: 6379
  servers: [] # The form is <IP>:<port>:<db> "name" for each element

monitoring:
  enabled: false
  image_version: latest

service:
  deployment: minikube
  port:
    name: api-gateway
    targetPort: 8087
    port: 8087
    nodePort: null
config:
  public: {}
  private: {}

mesh:
  enabled: false
  certs:
    cert: "snakeoil"
    key: "snakeoil"

debug:
  enabled: false
  # Define here any port that you want to expose for debugging purposes
  ports: []

networkpolicy:
  egress:
    enabled: false

common_images:
  nutcracker:
    nutcracker: "nutcracker:latest"

app:
  port: 8087
