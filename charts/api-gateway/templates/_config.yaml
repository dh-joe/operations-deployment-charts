{{- define "config.app" }}
{{- $strip_cookies := .Values.main_app.strip_api_cookies -}}

# api gateway envoy config
{{ if .Values.main_app.telemetry_port -}}
admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 1666
{{ end -}}
static_resources:
  listeners:
{{- if .Values.main_app.telemetry_port }}
  - name: telemetry_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: {{ .Values.main_app.telemetry_port }}
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/healthz"
          - name: envoy.router
            typed_config: {}
          http_protocol_options: {accept_http_10: true}
          route_config:
            virtual_hosts:
            - domains: ['*']
              name: admin_cluster
              routes:
              - match:
                  prefix: /stats
                route:
                  cluster: admin_cluster
                  prefix_rewrite: "/stats"
                  timeout: 5.0s
              - match:
                  prefix: /
                direct_response:
                  status: 403
                  body: {inline_string: "You can't access this url."}
          stat_prefix: admin_cluster
{{- end }}
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: {{ .Values.main_app.port }}
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
{{- if .Values.main_app.access_log }}
          # configure logging
          access_log:
            name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
{{- if eq .Values.main_app.access_log.type "stdout" }}
              path: /dev/stdout
{{- else if eq .Values.main_app.access_log.type "eventgate" }}
              path: /var/log/access.log
{{- else }}
{{ fail "Invalid access_log.type" }}
{{- end }}
              log_format:
                json_format:
                  # TODO: unflatten when support for nested logs is added to envoy
                  $schema: "/api-gateway/request/1.0.0"
                  meta.uri: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  meta.request_id: "%REQ(X-REQUEST-ID)%"
                  meta.dt: "%START_TIME(%FT%TZ)%"
                  meta.domain: "%REQ(HOST)%"
                  meta.stream: "api-gateway.request"
                  http.method: "%REQ(:METHOD)%"
                  http.protocol: "%PROTOCOL%"
                  http.status_code: "%RESPONSE_CODE%"
                  http.client_ip: "%REQ(X-FORWARDED-FOR)%"
                  http.request_headers.user-agent: "%REQ(USER-AGENT)%"
                  total_time_ms: "%DURATION%"
                  client_id: "%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:jwt_payload:aud)%"
                  route: "%ROUTE_NAME%"
{{- end }}
          use_remote_address: true
          local_reply_config:
            # Override the empty %LOCAL_REPLY_BODY% for 404 to "Not Found"
            mappers:
              - filter:
                  status_code_filter:
                    comparison:
                      op: EQ
                      value:
                        default_value: 404
                        runtime_key: unused_key_404
                body:
                  inline_string: "Not Found"
            # Default format applied to all error responses
            body_format:
              json_format:
                httpCode: "%RESPONSE_CODE%"
                httpReason: "%LOCAL_REPLY_BODY%"
          route_config:
            name: api_wikimedia_org_route
            virtual_hosts:
            - name: api_wikimedia_org_vhost
              domains:
{{- range $domain := .Values.main_app.domains }}
              - {{ $domain }}
{{- end }}
              routes:
              - name: api-portal-redirect
                match:
                  path: '/'
                redirect:
                  path_redirect: '/wiki/'
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: api-portal
                match:
                  prefix: "/wiki/"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: api-portal-static
                match:
                  prefix: "/static/"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: api-portal-restbase
                match:
                  prefix: "/api/rest_v1/"
                route:
                  cluster: restbase_cluster
                  prefix_rewrite: "/api.wikimedia.org/v1/"
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: favicon
                match:
                  path: "/favicon.ico"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: robotstxt
                match:
                  path: "/robots.txt"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: appletouch-icon
                match:
                  path: "/apple-touch-icon.png"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: api-portal
                match:
                  prefix: "/w/"
                route:
                  cluster: appserver_cluster
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
              - name: feed
{{- if $strip_cookies }}
                request_headers_to_remove: ["cookie"]
                response_headers_to_remove: ["set-cookie"]
{{- end }}
                match:
                  prefix: "/feed/"
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                    allow_headers: "authorization"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^/feed/v1/(\w+)/(\w+)/'
                    substitution: '/\2.\1.org/v1/feed/'
                  cluster: restbase_cluster
                  rate_limits: &api_rate_limits_config
                    # For authenticated requests, the following descriptor is produced:
                    # - {value: ("client_id","<aud>")("user_id","<uid>"), override:(value:1000,unit:MINUTE)}
                    # Applying limit/unit for client_id/user_id pair.
                    #
                    # If JWT is absent, no descriptor generated.
                    # If override is missing, descriptor is ignored since it's not configured in the service
                    - stage: 0
                      actions:
                        - dynamic_metadata:
                            descriptor_key: client_id
                            metadata_key:
                              key: envoy.filters.http.jwt_authn
                              path:
                                - key: jwt_payload
                                - key: aud
                        - dynamic_metadata:
                            descriptor_key: user_id
                            # TODO: envoy 1.16 default_value: anon - still works,
                            # some corner cases might exist when the limit is not applied for anon
                            metadata_key:
                              key: envoy.filters.http.jwt_authn
                              path:
                                - key: jwt_payload
                                - key: sub
                      limit:
                        dynamic_metadata:
                          metadata_key:
                            key: envoy.filters.http.jwt_authn
                            path:
                              - key: jwt_payload
                              - key: ratelimit
                    # For authenticated requests emit the following descriptor:
                    # - {value: ("client_id_anon_fallback","<class>")("remote_address","123.123.123.123)}
                    # which will be ignored by the service, since we only match on "anon" class.
                    # For unauthenticated requests <class> would fallback to "anon", and the statically
                    # configured limit will kick in.
                    - stage: 0
                      actions:
                        - dynamic_metadata:
                            descriptor_key: user_class_anon_fallback
                            #TODO: envoy 1.16 default_value: anon - until envoy 1.16 anon limits will not be applied
                            metadata_key:
                              key: envoy.filters.http.jwt_authn
                              path:
                                - key: jwt_payload
                                - key: aud
                        - request_headers:
                            # Use x-client-ip because Envoy's X-forwarded-for won't trust
                            # the upstream IP in cases of more than one IP in the list.
                            header_name: x-client-ip
                            descriptor_key: client_ip
{{- /*
BEGIN descriptions/mobileapps_cluster route definition
*/}}
              - name: descriptions
{{- if $strip_cookies }}
                request_headers_to_remove: ["cookie"]
                response_headers_to_remove: ["set-cookie"]
{{- end }}
                match:
                  safe_regex:
                    google_re2: {}
                    regex: '^/core/v1/(\w+)/(\w+)/page/(.*)/description$'
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                    allow_headers: "authorization"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^/core/v1/(\w+)/(\w+)/page/(.*)/description$'
                    substitution: '/\2.\1.org/v1/page/description/\3'
                  cluster: mobileapps_cluster
                  rate_limits: *api_rate_limits_config
{{- /* END descriptions/mobileapps_cluster route definition */}}
{{- /* BEGIN pathing_map route definition */}}
{{- range $api_route, $route_opts := .Values.main_app.pathing_map }}
              - name: core
{{- if $strip_cookies }}
                request_headers_to_remove: ["cookie"]
                response_headers_to_remove: ["set-cookie"]
{{- end }}
                match:
                  safe_regex:
                    google_re2: {}
                    regex: '^{{ $api_route }}$'
                metadata:
                  filter_metadata:
                    envoy.lua:
                      lua_lang: '{{ $route_opts.lua_lang }}'
                      dst_host: '{{ $route_opts.host }}'
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                    allow_headers: "authorization"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^{{ $api_route }}$'
                    substitution: '{{ $route_opts.path }}'
                  cluster: mwapi_cluster
                  host_rewrite_header: "x-internal-host"
                  # TODO: switch to virtual host level rate limits once
                  # we figure out how to exclude /w and /wiki
                  rate_limits: *api_rate_limits_config
{{- end }}
{{- /* END pathing_map route definition */}}
{{- /* BEGIN discovery_endpoints route definition */}}
{{- range $discovery_route, $discovery_opts := .Values.main_app.discovery_endpoints }}
              - name: {{ $discovery_route }}_route
{{- if $strip_cookies }}
                request_headers_to_remove: ["cookie"]
                response_headers_to_remove: ["set-cookie"]
{{- end }}
                match:
                  safe_regex:
                    google_re2: {}
                    regex: '^/service/{{ $discovery_opts.path }}/(.*)$'
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                    allow_headers: "authorization"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^/service/{{ $discovery_opts.path }}/(.*)$'
                    substitution: '/\1'
                  cluster: {{ $discovery_route}}_cluster
                  rate_limits: *api_rate_limits_config
{{- end }}
{{- /* END discovery_endpoints route definition */}}
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/healthz"
{{- if .Values.main_app.jwt.enabled }}
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                wikimedia:
                  issuer: {{ .Values.main_app.jwt.issuer }}
                  local_jwks:
                    filename: /etc/jwks/jwks.json
                  forward: true
                  from_headers:
                    name: Authorization
                    value_prefix: Bearer
                  payload_in_metadata: "jwt_payload"
              rules:
                # For docs wiki, allow no JWT, but if JWT is supplied, verify it.
                - match:
                    prefix: /wiki/
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
                - match:
                    prefix: /w/
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
                - match:
                    path: /
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
                # For everything else, block non-idempotent requests without JWT
                - match:
                    headers:
                      - name: ":method"
                        safe_regex_match:
                          google_re2: {}
                          regex: "(POST|PUT|PATCH|DELETE)"
                    prefix: /
                  requires:
                    provider_name: wikimedia
                # For idempotent requests, allow missing JWT, but verify it if provided
                - match:
                    headers:
                      - name: ":method"
                        safe_regex_match:
                          google_re2: {}
                          regex: "(GET|HEAD|OPTIONS)"
                    prefix: /
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")

                  local metadata = request_handle:metadata()
                  lua_lang = metadata:get("lua_lang")
                  if lua_lang ~= '' and lua_lang ~= nil then
                    site_lang = string.match(path, lua_lang)
                    internal_host = string.gsub(metadata:get("dst_host"), "LANGUAGE", site_lang)
                  else
                    internal_host = metadata:get("dst_host")
                  end
                  request_handle:headers():add("x-internal-host", internal_host)

                  -- TODO: envoy 1.16 - we should be relying on default value for the user_class_anon_fallback descriptor
                  local jwt_filter_metadata = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn")
                  if (jwt_filter_metadata == nil or jwt_filter_metadata["jwt_payload"] == nil) then
                    request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.jwt_authn", "jwt_payload", {aud="anon"})
                  end
                end
{{- end }}
{{- if .Values.main_app.ratelimiter }}
          - name: envoy.filters.http.ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: wikimedia
              stage: 0
              timeout: 0.25s
              rate_limit_service:
                transport_api_version: V3
                grpc_service:
                  envoy_grpc:
                    cluster_name: rate_limit_cluster
{{- end }}
          - name: envoy.filters.http.header_to_metadata
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
              request_rules:
                - header: "x-wikimedia-debug"
                  on_header_present:
                    metadata_namespace: envoy.lb
                    key: x_wikimedia_debug_server
                    regex_value_rewrite:
                      pattern:
                        google_re2: {}
                        regex: "^backend=([\\w.]+).*$"
                      substitution: "\\1"
                  on_header_missing:
                    metadata_namespace: envoy.lb
                    key: x_wikimedia_debug_server
                    value: none
                    type: STRING
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.router
{{- if .Values.tls.enabled }}
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
              certificate_chain:
                filename: "/etc/envoy-ssl/service.crt"
              private_key:
                filename: "/etc/envoy-ssl/service.key"
{{- end }}
  clusters:
{{- $idle_timeout := .Values.main_app.idle_timeout -}}
{{- /* BEGIN endpoints cluster definition */}}
{{- range $cluster_name, $cluster_opts := .Values.main_app.endpoints }}
  - name: {{ $cluster_name }}
    connect_timeout: 0.25s
    max_requests_per_connection: 1000
    common_http_protocol_options:
      idle_timeout: {{ $idle_timeout }}
    type: {{ $cluster_opts.type }}
    lb_policy: ROUND_ROBIN
    # required for non-ipv6 services on localhost or elsewhere
    dns_lookup_family: V4_ONLY
{{- if $cluster_opts.tls }}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            cipher_suites: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
          validation_context:
            trusted_ca:
              filename: /etc/api-gateway/puppetca.crt.pem
{{- end }}
    lb_subset_config:
      fallback_policy: "DEFAULT_SUBSET"
      default_subset:
        x_wikimedia_debug_server: none
      subset_selectors:
        - keys:
            - x_wikimedia_debug_server
    load_assignment:
      cluster_name: {{ $cluster_name }}
      endpoints:
      - lb_endpoints:
{{- range $host, $port := $cluster_opts.hosts }}
        - endpoint:
            address:
              socket_address:
                address: {{ $host }}
                port_value: {{ $port }}
          metadata:
            filter_metadata:
              envoy.lb:
                x_wikimedia_debug_server: none
{{- end }}
{{- range $host, $port := $cluster_opts.debug_hosts }}
        - endpoint:
            address:
              socket_address:
                address: {{ $host }}
                port_value: {{ $port }}
          metadata:
            filter_metadata:
              envoy.lb:
                x_wikimedia_debug_server: {{ $host }}
{{- end }}
{{- end }}
{{- /* END endpoints cluster definition */}}
{{- /* BEGIN discovery cluster definition */}}
{{- range $cluster_name, $cluster_opts := .Values.main_app.discovery_endpoints }}
  - name: {{ $cluster_name }}_cluster
    connect_timeout: 0.25s
    max_requests_per_connection: 1000
    common_http_protocol_options:
      idle_timeout: {{ $idle_timeout }}
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    # required for non-ipv6 services on localhost or elsewhere
    dns_lookup_family: V4_ONLY
{{- if $cluster_opts.tls }}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            cipher_suites: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
          validation_context:
            trusted_ca:
              filename: /etc/api-gateway/puppetca.crt.pem
{{- end }}
    load_assignment:
      cluster_name: {{ $cluster_name }}_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: {{ $cluster_name }}
                port_value: {{ $cluster_opts.port }}
{{- end }}
{{- /* END discovery cluster definition */}}
{{- if .Values.main_app.ratelimiter }}
  - name: rate_limit_cluster
    type: static
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: rate_limit_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8081
{{- end }}
{{ if .Values.main_app.telemetry_port }}
  - name: admin_cluster
    type: static
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: admin_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 1666
{{- end }}
{{- end }}
