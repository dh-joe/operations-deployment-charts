{{- define "config.app" }}
# api gateway envoy config
{{ if .Values.main_app.admin_port -}}
admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: {{ .Values.main_app.admin_port }}
{{ end -}}
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: {{ .Values.main_app.port }}
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          # configure logging
          access_log:
            name: envoy.file_access_log
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              json_format:
                start_time: "%START_TIME%"
                req_method: "%REQ(:METHOD)%"
                req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                upstream_path: "%REQ(:PATH)%"
                req_proto: "%PROTOCOL%"
                resp_code: "%RESPONSE_CODE%"
                resp_flags: "%RESPONSE_FLAGS%"
                bytes_rx: "%BYTES_RECEIVED%"
                bytes_tx: "%BYTES_SENT%"
                upstream_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                req_x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                req_user_agent: "%REQ(USER-AGENT)%"
                req_request_id: "%REQ(X-REQUEST-ID)%"
                req_authority: "%REQ(:AUTHORITY)%"
                upstream_host: "%UPSTREAM_HOST%"
                jwt_cid: "%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:jwt_payload:cid)%"
                duration: "%DURATION%"
          use_remote_address: true
          route_config:
            name: api_wikimedia_org_route
            virtual_hosts:
            - name: api_wikimedia_org_vhost
              domains: ["api.wikimedia.org"]
              routes:
              - match:
                  prefix: "/wiki/"
                route:
                  cluster: appserver_cluster
              - match:
                  prefix: "/w/"
                route:
                  cluster: appserver_cluster
              - match:
                  prefix: "/feed/"
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^/feed/v1/(\w+)/(\w+)/'
                    substitution: '/\2.\1.org/v1/feed/'
                  cluster: restbase_cluster
{{- range $api_route, $route_opts := .Values.main_app.pathing_map }}
              - match:
                  safe_regex:
                    google_re2: {}
                    regex: '^{{ $api_route }}$'
                metadata:
                  filter_metadata:
                    envoy.lua:
                      lua_lang: '{{ $route_opts.lua_lang }}'
                      dst_host: '{{ $route_opts.host }}'
                route:
                  cors:
                    allow_origin_string_match:
                      - prefix: "*"
                  regex_rewrite:
                    pattern:
                      google_re2: {}
                      regex: '^{{ $api_route }}$'
                    substitution: '{{ $route_opts.path }}'
                  cluster: api_cluster
                  host_rewrite_header: "x-internal-host"
{{- end }}
          http_filters:
{{- if .Values.main_app.jwt }}
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                wikimedia:
                  issuer: http://dev.wikipedia.org
                  local_jwks:
                    filename: /etc/api-gateway/jwks.json
                  forward: true
                  from_headers:
                    name: Authorization
                    value_prefix: Bearer
                  payload_in_metadata: "jwt_payload"
              rules:
                - match:
                    prefix: /core
                  requires:
                    requires_any:
                      requirements:
                        - provider_name: wikimedia
                        - allow_missing: {}
                - match:
                    # Don't check anything for docs wiki
                    prefix: /wiki
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local path = request_handle:headers():get(":path")

                  local metadata = request_handle:metadata()
                  lua_lang = metadata:get("lua_lang")
                  if lua_lang ~= '' and lua_lang ~= nil then
                    site_lang = string.match(path, lua_lang)
                    internal_host = string.gsub(metadata:get("dst_host"), "LANGUAGE", site_lang)
                    request_handle:headers():add("x-internal-host", internal_host)
                  else
                    internal_host = metadata:get("dst_host")
                  end
                end
{{- end }}
{{- if .Values.main_app.ratelimiter }}
          - name: envoy.filters.http.ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: wikipedia
              stage: 0
              timeout: 0.25s
              rate_limit_service:
                grpc_service:
                  envoy_grpc:
                    #TODO move to using v3 protocol once ratelimit has been updated.
                    cluster_name: rate_limit_cluster
{{- end }}
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.router
  clusters:
{{- range $cluster_name, $cluster_opts := .Values.main_app.endpoints }}
  - name: {{ $cluster_name }}
    connect_timeout: 0.25s
    type: {{ $cluster_opts.type }}
    lb_policy: ROUND_ROBIN
    # required for non-ipv6 services on localhost or elsewhere
    dns_lookup_family: V4_ONLY
{{- if $cluster_opts.tls }}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            cipher_suites: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
          validation_context:
            trusted_ca:
              filename: /etc/envoy/puppetca.crt.pem
{{- end }}
    load_assignment:
      cluster_name: {{ $cluster_name }}
      endpoints:
      - lb_endpoints:
{{- range $host, $port := $cluster_opts.hosts }}
        - endpoint:
            address:
              socket_address:
                address: {{ $host }}
                port_value: {{ $port }}
{{- end }}
{{- end }}
{{- if .Values.main_app.ratelimiter }}
  - name: rate_limit_cluster
    type: static
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: rate_limit_cluster
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8081
{{- end }}
{{- end }}
