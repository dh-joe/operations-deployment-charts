# Default values for EventGate.

helm_scaffold_version: 0.2 # This can be useful when backporting fixes.
docker:
  registry: docker-registry.wikimedia.org
  pull_policy: IfNotPresent
resources:
  replicas: 1


service:
  # valid values are "production" and "minikube" and "none".
  # If "none", no k8s Service will be deployed for this release.
  deployment: minikube
  # You need to define this if "production" is used. In minikube environments let it autoallocate
  port: null
  # Set routed_via to the same (arbitrary) value for all releases that you want
  # this k8s Service to route to.
  # If you don't to deploy a service with a specific release (e.g. a canary), set service: false
  # routed_via defaults to template "wmf.chartname", so by default a Service will only route to the release it is part of.
  # routed_via:

monitoring:
  enabled: true
  image_version: latest

# To be defined in a private space
# certs:
#   cert: ... # The service public certificate
#   key: ...  # The service private key

# Debug mode adds the --profile and --inspect flags to the NodeJS service.
# You can get the v8.log profiling output
# from the pod with e.g (staging):
#   sudo KUBECONFIG=/etc/kubernetes/admin-staging.config kubectl cp -n eventgate-analytics -c eventgate-analytics-staging <pod_id>:/tmp/eventgate-analytics-v8.log ./
# You can connect to the Node Inspector on port 31229 for the master service-runner process,
# and port 31230 for the worker process.  Note that if a worker is restarted, it willl
# claim a new port and not be reachable externally.
#
#debug_mode_enabled: false

# Set nodejs_extra_opts array to add extra opts to the nodejs CLI startup.
# Useful mostly for debugging, e.g. nodejs_extra_opts: [--trace-gc].
#nodejs_extra_opts: false

# Deploys a wmfdebug sidecar container in the pod.
# NOTE: As of 2023-11 this isn't working due to changed k8s security permissions.
#
# You can log into the wmfdebug container with e.g. (staging):
#   sudo KUBECONFIG=/etc/kubernetes/admin-staging.config kubectl exec -ti <pod_id> -n eventgate-analytics -c staging-wmfdebug bash
#wmfdebug_container_enabled: false

subcharts:
  # Set this to true during local minikube development to get a Kafka pod deployed.
  # You only need to do this if you don't manually install the kafka-dev chart.
  kafka: false


# === Timeout & k8s lifecycle sleep settings ===
#
# The default EventBus MW extension request timeout
# is 10 seconds.  We want to give eventgate at least much
# time to process a request before k8s forcefully terminates pods.
# This also relates to the prestop hook used on envoy proxy & eventgate
# containers. If MW configures EventBus with a different request timeout,
# then the relevant eventgate's prestop and terminationGracePeriod should be
# adjusted, to avoid losing in flight events.
# In summary, all the different timeout settings should be set relative to the
# most relevant client (EventBus) request timeout.
#
# - client_request_timeout = Largest (e.g. MW EventBus wgEventServices) request timeout
# - Outgoing eventgate envoy service_proxy `timeout` setting: client_request_timeout - 1
# - eventgate main_app.prestop_sleep: client_request_timeout + 1
# - eventgate's service mesh TLS proxy mesh.prestop_sleep: client_request_timeout + 2
# - pod terminationGracePeriodSeconds: client_request_timeout + 3
#
# By setting all these values relative to the primary/largest client request timeout,
# we ensure that a client timeout should happen before any containers are killed by k8s.
# https://phabricator.wikimedia.org/T349823

# Default to 13, as EventBus MW extension timeout defaults to 10.
terminationGracePeriodSeconds: 13

# TODO: rename 'main_app' to 'app'.
main_app:
  # This should uniquely identify your chart's main app's name.
  # In the case where a chart is used for multiple deployments, this
  # should be set to something unique for each one.
  name: eventgate
  # Don't use docker.registry value for main_app image so we can override
  # and use locally built and cached images via --set main_app.image during development.
  image: docker-registry.wikimedia.org/wikimedia/eventgate-wikimedia
  version: latest # we use latest in the defaults.
  port: 8192

  # See: https://phabricator.wikimedia.org/T220661#5117972
  requests:
    cpu: 200m
    memory: 150Mi
  limits:
    cpu: 1500m
    memory: 300Mi

  # Default to 11, as EventBus MW extension timeout defaults to 10.
  prestop_sleep: 11

  # EventGate service-runner app defaults config.
  # In production, these should be overridden in service/release specific values files.
  conf:
    # Events can be large; increase max body size
    # Note that this is larger than Kafka's message.max.bytes (set below).
    # The request body is accepted as an array of events, each of which
    # will be an individual message in Kafka.  Each individual
    # message must be smaller than message.max.bytes, but EventGate
    # can accept multiple events at once in the request body.
    max_body_size: 10mb

    # Mapping of stream names to allowed schemas
    stream_config_uri: /etc/eventgate/stream-config.yaml

    # This field in each event will be used to extract a
    # (possibly relative) schema uri.  The default is $schema.
    # An array of field names will cause EventGate to search for
    # fields by these names in each event, using the first match.
    schema_uri_field: $schema

    # If set, this URI will be prepended to any relative schema URI
    # extracted from each event's schema_field.

    # /srv/service/schemas/primary is in the eventgate image cloned at build
    # time from https://gerrit.wikimedia.org/r/schemas/event/primary.
    schema_base_uris:
      - 'file:///srv/service/schemas/event/primary/jsonschema/'

    # These schema URIs will be 'precached' on service startup.
    # They should be resolveable by the URI prefixes in schema_base_uris.
    # These should be set to the most comprehensive list for each release.
    schema_precache_uris:
      - /error/0.0.3
      - /test/event/0.0.3

    # This field in each event will be used to extract a destination 'stream' name.
    # This will equal the destination Kafka topic, unless a topic prefix
    # is also configured.
    stream_field: meta.stream

    # Prefix topics with the topic_prefix name and a .
    topic_prefix: datacenter1.

    # This field will be used in log messages to uniquely ID each event.
    id_field: meta.id

    # This field will be used to extract and set a Kafka message timestamp.
    dt_field: meta.dt

    # NOTE: This config is templated in _config.yaml.
    #error_stream: eventgate.error.validation

    # If test_events is set, EventGate will set up a /v1/_test/events
    # route that will process these test_events as if they were POSTed
    # to /v1/events. This is used for the k8s readinessProbe.
    # IMPORTANT:
    # If you are using stream config, make sure this stream is configured!
    # If using local stream config, the _stream-config.yaml template
    # will automatically configure an <main_app.name>.test.event stream,
    # so in your helmfiles you should override this to a test event
    # that prodcues to that stream.
    test_events:
      - $schema: /test/event/1.0.0
        meta:
          # make sure this is configured in stream config if you are using it.
          stream: eventgate.test.event

    # kafka configs go here.
    kafka:
      conf:
        # Override this in release specific values.yaml files
        metadata.broker.list: ['kafka.default.svc.cluster.local:31092']
        compression.codec: snappy
        # Match this to what is set on brokers in production.
        message.max.bytes: 4194304
        # Silence noisy connection reaper logging
        # https://github.com/Blizzard/node-rdkafka/issues/326
        # https://github.com/edenhill/librdkafka/issues/768#issuecomment-246302856
        log.connection.close: false
        # Force rdkafka to prefer IPv4 addresses for repeatablity.
        # See also: https://phabricator.wikimedia.org/T218268#5049090
        broker.address.family: v4
        # Emit rdkafka stats every 30 seconds
        # (Prometheus will only scrape every 60 seconds).
        statistics.interval.ms: 30000
        # Set these to enable Kafka producer TLS (no authentication, just encryption).
        #security.protocol: ssl
        # These ssl setttings are only used if security.protocol == ssl
        ssl.ca.location: /etc/ssl/certs/wmf-ca-certificates.crt
        ssl.cipher.suites: ECDHE-ECDSA-AES256-GCM-SHA384
        ssl.curves.list: P-256
        ssl.sigalgs.list: ECDSA+SHA256

        # Uncomment to enable rdkafka trace logging (and set log_level: trace above)
        #event_cb: true
        #log_level: 7
        #debug: broker,topic,msg

      # kafka topic conf goes here
      topic_conf: {}

      # Producer type specific overrides.
      # If you need to configure some producer specific settings,
      # e.g. different batch settings, you can provide them here.
      hasty:
        conf:
          # HastyProducer doesn't block HTTP clients, so we can
          # afford to wait for a largish batch size.
          queue.buffering.max.ms: 1000
          # A custom kafka config. Will call producer.setPollInterval
          # with this value if set.
          producer.poll.interval.ms: 100
      guaranteed:
        conf:
          # Before T338357, the value was 0, for the following reason:
          # GuaranteedProducer does block HTTP clients, so we attempt to send
          # the produce request as soon as possible, rather than waiting
          # for larger batches.
          # New value for T338357:
          # We tested a more lenient value to allow messages to be batched
          # up to some milliseconds, rather than sending them as they arrive.
          # This may seem to add a small latency delay in the producer,
          # but in our tests it decreased RTT to the Kafka brokers
          # and the overall produce latency.
          queue.buffering.max.ms: 10
          # Custom kafka config, will call producer.setPollInterval
          # with this value if set.
          producer.poll.interval.ms: 10

  # This stream_config will be rendered in /etc/eventgate/stream-config.yaml
  # and can be used EventGate to restrict event schemas to specific streams
  # by setting stream_config_url: /etc/eventgate/stream-config.yaml.
  # test and error streams are automatically configured by this chart.
  # This is not needed if you use remote stream config, e.g. in mediawiki-config wgEventStreams.
  # If you do, make sure the error and test streams are properly configured there,
  # as the test and error streams will not be automatically added to stream config there.
  #stream_config:
  #  'mediawiki.api-request':
  #     schema_title: mediawiki/api/request
  # # etc.


networkpolicy:
  egress:
    enabled: false

mesh:
  enabled: false
  image_version: latest
  public_port: 4192 # the port where TLS will be exposed
  upstream_timeout: "180.0s"
  # To be defined in a private space
  certs:
    cert: "snakeoil"
    key: "snakeoil"
  telemetry:
    enabled: true
    port: 9361
  # Default to 11, as EventBus MW extension timeout defaults to 10.
  prestop_sleep: 12

# Mesh related pure TCP proxies
tcp_proxy:
  listeners: []

# Should be provided by configuration management.
# See details of the structures in the comments
# In the configuration module.
services_proxy: ~
tcp_services_proxy: ~

# Mesh-related discovery
# TODO: move under mesh.* once we can
discovery:
  # List of listeners. These should match service mesh endpoint names
  # (defined in https://gerrit.wikimedia.org/g/operations/puppet/+/refs/heads/production/hieradata/common/profile/services_proxy/envoy.yaml)
  listeners: []

# Add here the list of kafka-clusters (by name) that the service will need to reach.
kafka:
  allowed_clusters: []

app:
  port: 8192
