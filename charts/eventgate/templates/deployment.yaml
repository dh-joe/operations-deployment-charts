apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "wmf.releasename" . }}
  labels:
    chart: {{ template "wmf.chartname" . }}
    app: {{ .Values.main_app.name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      chart: {{ template "wmf.chartname" . }}
      app: {{ .Values.main_app.name }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.resources.replicas }}
  template:
    metadata:
      labels:
        chart: {{ template "wmf.chartname" . }}
        app: {{ .Values.main_app.name }}
        release: {{ .Release.Name }}
        routing_tag: {{ .Values.service.routing_tag | default .Release.Name }}
      annotations:
        checksum/config: {{ include "config.app" . | sha256sum }}
        {{ if .Values.main_app.stream_config -}}
        checksum/stream-config: {{ include "stream.config" . | sha256sum }}
        {{ end -}}
        {{ if .Values.monitoring.enabled -}}
        checksum/prometheus-statsd: {{ .Files.Get "config/prometheus-statsd.conf" | sha256sum }}
        {{ end -}}
        prometheus.io/port: "9102"
        prometheus.io/scrape: "true"
        {{- include "tls.annotations" . | indent 8 }}
    spec:
      {{- if .Values.debug_mode_enabled | default false }}
      shareProcessNamespace: true
      {{- end }}
      {{- if .Values.affinity }}
{{ toYaml .Values.affinity | indent 6 }}
      {{- end }}
      containers:
        # The main application container
        - name: {{ .Values.main_app.name }}
          image: "{{ .Values.main_app.image }}:{{ .Values.main_app.version }}"
          command: ["nodejs"]
# If debug_mode, then enable the NodeJS Inspector and save v8 profiling data.
# service-runner master inspector port will be 9229, and worker will be 9230.
{{- if .Values.debug_mode_enabled | default false }}
          args: ["--inspect=0.0.0.0:9229", "--prof", "--logfile=/tmp/{{ .Values.main_app.name }}-v8.log", "--no-logfile-per-isolate", "/srv/service/server.js", "-c", "/etc/eventgate/config.yaml"]
{{- else }}
          args: ["/srv/service/node_modules/.bin/eventgate", "-c", "/etc/eventgate/config.yaml"]
{{- end }}
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          ports:
            - containerPort: {{ .Values.main_app.port }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.main_app.port }}
          readinessProbe:
            # EventGate should process a test event if it is ready.
            # post-events examples will read the given schema for
            # and an examples array and post that data as events.
            # It exits 0 if the events were accepted and produced
            # or non-zero if not. By setting --dt-field, the script
            # will make sure that the event meta.dt has a current timestamp.
            exec:
              command:
                - /srv/service/scripts/post-events
                - '--service-url=http://localhost:{{ .Values.main_app.port }}/v1/events'
                - '--dt-field=meta.dt'
                - examples
                - '{{ .Values.main_app.readiness_probe_schema_url }}'
            initialDelaySeconds: 2
          env:
            - name: SERVICE_IDENTIFIER
              value: {{ .Values.main_app.name }}
{{ if .Values.puppet_ca_crt }}
            - name: NODE_EXTRA_CA_CERTS
              value: /etc/eventgate/puppetca.crt.pem
{{- end }}
          volumeMounts:
            - name: {{ .Values.main_app.name }}-config-volume
              mountPath: /etc/eventgate
          resources:
            requests:
{{ toYaml .Values.main_app.requests | indent 14 }}
            limits:
{{ toYaml .Values.main_app.limits | indent 14 }}
{{- if .Values.monitoring.enabled }}
        - name: metrics-exporter
          image: {{ .Values.docker.registry }}/prometheus-statsd-exporter:{{ .Values.monitoring.image_version }}
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          volumeMounts:
            - name: metrics-exporter-config-volume
              mountPath: /etc/monitoring
{{- end }}
{{- if .Values.debug_mode_enabled | default false }}
        - name: {{ .Values.main_app.name }}-wmfdebug
          image: {{ .Values.docker.registry }}/wmfdebug:latest
          command: ["/bin/bash"]
          args: ["-c", "echo 'Sleeping infinitely...'; sleep infinity;"]
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          stdin: true
          tty: true
{{- end }}
        {{- include "tls.container" . | indent 8 }}
      volumes:
        - name: {{ .Values.main_app.name }}-config-volume
          configMap:
            name: {{ template "wmf.releasename" . }}-config
        {{- if .Values.monitoring.enabled }}
        - name: metrics-exporter-config-volume
          configMap:
            name: {{ template "wmf.releasename" . }}-metrics-exporter-config
        {{- end }}
        {{- include "tls.volume" . | indent 8 }}

