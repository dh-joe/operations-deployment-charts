apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "base.name.release" . }}
  labels:
    app: {{ template "base.name.chart" . }}
    chart: {{ template "base.name.chartid" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "base.name.chart" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.resources.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "base.name.chart" . }}
        release: {{ .Release.Name }}
        routed_via: {{ .Values.routed_via | default .Release.Name }}
      annotations:
        checksum/config: {{ include "config.app" . | sha256sum }}
        prometheus.io/port: {{ .Values.app.port | quote }}
        prometheus.io/scrape: "true"
        {{- if .Values.main_app.certs }}{{ if .Values.main_app.certs.kask }}
        prometheus.io/scheme: https
        {{- end }}{{ end }}
    spec:
      {{ if .Values.subcharts.cassandra }}
      {{- $hostname := printf "%s-%s.%s.%s" .Release.Name "cassandra" .Release.Namespace "svc.cluster.local" -}}
      initContainers:
        - name: create-kask-keyspace
          # NOTE: Hardcode this for now, as well as the keyspace and table below
          # This is ugly but it's only meant for minikube use, let's stomach it for now
          image: "{{ .Values.cassandra.image.repo }}:{{ .Values.cassandra.image.tag }}"
          command:
            - sh
            - -c
            - echo "CREATE KEYSPACE IF NOT EXISTS kask WITH REPLICATION = { 'class':'SimpleStrategy', 'replication_factor':1}; CREATE TABLE IF NOT EXISTS kask.values (key text PRIMARY KEY, value blob);" | cqlsh {{ $hostname }}
      {{ end }}
      {{- if .Values.affinity }}
      {{- toYaml .Values.affinity | nindent 6 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
        # The main application container
        - name: {{ template "base.name.release" . }}
          image: "{{ .Values.docker.registry }}/{{ .Values.main_app.image }}:{{ .Values.main_app.version }}"
          command: ["./kask"]
          args: ["--config", "/etc/kask/config.yaml"]
          imagePullPolicy: {{ .Values.docker.pull_policy }}
          ports:
            - containerPort: {{ .Values.app.port }}
          livenessProbe:
{{ toYaml .Values.main_app.liveness_probe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.main_app.readiness_probe | indent 12 }}
          env:
            - name: SERVICE_IDENTIFIER
              value: {{ template "base.name.release" . }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/kask
            {{- with .Values.main_app.certs }}{{ if .cassandra }}
            - name: cassandra-certs-volume
              mountPath: /etc/cassandra-certs
            {{- end }}{{ end }}
            {{- with .Values.main_app.certs}}{{ if .kask }}
            - name: kask-certs-volume
              mountPath: /etc/kask-certs
            {{- end }}{{ end }}
          resources:
            requests:
{{ toYaml .Values.main_app.requests | indent 14 }}
            limits:
{{ toYaml .Values.main_app.limits | indent 14 }}
      volumes:
        - name: config-volume
          configMap:
            name: config-{{ .Release.Name }}
        {{- if .Values.main_app.certs }}{{ if .Values.main_app.certs.cassandra }}
        - name: cassandra-certs-volume
          configMap:
            name: cassandra-certs-{{ .Release.Name }}
        {{- end }}{{ end }}
        {{- if .Values.main_app.certs }}{{ if .Values.main_app.certs.kask }}
        - name: kask-certs-volume
          configMap:
            name: kask-certs-{{ .Release.Name }}
        {{- end }}{{ end }}
