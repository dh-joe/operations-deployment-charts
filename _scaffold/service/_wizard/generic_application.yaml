name: generic-application
description: Basic component for generic (non-LAMP) applications
modules:
  - "app.generic:1.0"
  - "app.job:3.0"
priority: 1
conflicts:
  - LAMP
templates:
  containers: |
    {{- include "app.generic.container" . }}
  volumes: |
    {{- include "app.generic.volume" . }}
  service: |
    {{ if not .Values.mesh.enabled }}
      {{- template "app.generic.service" . }}
    {{- end }}
    {{- if .Values.debug.enabled }}
      {{- template "app.generic.debug_service" . }}
    {{- end }}
  NetworkpolicyIngress: |
    {{- include "app.generic.networkpolicy_ingress" . -}}
  cronjob: |
    {{- include "app.job.container" (dict "Root" $root  "Name" $cronjob  "Job" $cron_opts )}}
    {{- include "app.job.volume" (dict "Root" $root "Name" $cronjob  "Job" $cron_opts) }}

values: |
  app:
    image: __image_name__
    version: latest # we use latest everywhere in the defaults.
    port: __port__ # port exposed as a Service, also used by service-checker.
    # Use command and args below to override the entrypoint. Type is arrays
    # Not necessary unless you want to change the entrypoint defined in the docker image
    # Example:
    # command: ["node"]
    # args: ["bin/server.js", "--param1", "arg1"]
    command: []
    args: []
    requests:
      cpu: 1m # Just some sample, edit these - 100m is the minimum for deployment
      memory: 200Mi # Just some sample, edit these
    limits:
      cpu: 1 # Just some sample, edit these
      memory: 400Mi # Just some sample, edit these
    liveness_probe:
      tcpSocket:
        port: __port__
    readiness_probe:
      httpGet:
        path: /
        port: __port__
    # add here any volumes to mount onto the pod. Example:
    #volumes:
    #- name: scratchdir
    #  emptyDir: {}
    # add here any mounted volumes to make accessible to the container. Example:
    #volumeMounts:
    #   - name: scratchdir # the name from your volume above
    #     mountPath: /scratch/ # where it should live in your container
  monitoring:
    # If enabled is true, monitoring annotations will be added to the deployment.
    enabled: false

  service:
    deployment: minikube # valid values are "production" and "minikube"
    port:
      name: http # a unique name of lowercase alphanumeric characters or "-", starting and ending with alphanumeric, max length 63
      # protocol: TCP # TCP is the default protocol
      targetPort: __port__ # the number or name of the exposed port on the container
      port: __port__ # the number of the port desired to be exposed to the cluster
      nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate

  config:
    public: {} # Add here all the keys that can be publicly available as a ConfigMap
    private: {} # Add here all the keys that should be private but still available as env variables

  # Additional resources if we want to add a port for a debugger to connect to.
  debug:
    enabled: false
    # Define here any port that you want to expose for debugging purposes
    ports: []

  cronjobs: {}
  #    my-cron-hourly:
  #      name: my-cron-hourly
  #      enabled: true
  #      command:
  #        - /bin/cowsay
  #        - "hello"
  #      schedule: "@hourly"
  #      concurrency: Replace
  #      image_versioned: my-app:1.1.1
  #      resources:
  #        requests:
  #          cpu: 500m
  #           memory: 200M
  #        limits:
  #          cpu: 500m
  #          memory: 200M
  #      volumeMounts:
  #        - mountPath: "/tmp/acow"
  #          name: tmp-cow-memory
  #      volumes:
  #        - name: tmp-cow-memory
  #          emptyDir:
  #            medium: Memory
  #            sizeLimit: "10Gi"
questions:
  - image_name
  - port
