name: LAMP
description: Basic LAMP application component.
modules:
  - "lamp.phpfpm:1.0"
  - "lamp.httpd:1.0"
  - "app.generic:1.0"
  - "lamp.networkpolicy:1.0"
  - "lamp.common:1.0"
  - "lamp.job:1.0"
  - "base.networkpolicy:1.1"
priority: 1
conflicts:
  - generic-application
templates:
  containers: |
    {{- include "lamp.httpd.container" . }}
    ## Add any additional volumes for apache configuration here.
    ## Indentation level: 10
    {{- include "lamp.phpfpm.container" . }}
    {{- if .Values.monitoring.enabled }}
    {{- include "lamp.httpd.exporter" . }}
    {{- include "lamp.phpfpm.exporter" . }}
    {{- end }}
  volumes: |
    # httpd custom configuration.
    {{- include "lamp.httpd.volume" . }}
    # Shared unix socket
    {{- include "lamp.common.socket" . }}
    # Application configuration, in /srv/app/config.json
    {{- include "lamp.phpfpm.volume" . }}
  configmap: |
    {{ include "lamp.httpd.configmap" . }}
    {{ include "lamp.phpfpm.configmap" . }}
  service: |
    {{ if not .Values.mesh.enabled }}
      {{- template "app.generic.service" . }}
    {{- end }}
    {{- if .Values.debug.enabled }}
      {{- template "app.generic.debug_service" . }}
    {{- end }}
  cronjob: |
    {{- include "lamp.job.container" (dict "Root" $root "Job" $cronjob) }}
  NetworkpolicyIngress: |
    {{- include "lamp.networkpolicy.ingress" . -}}
values: |
  app:
    port: 8080
  lamp:
    # wether to use unix sockets or tcp to communicate with php-fpm
    fcgi_mode: FCGI_UNIX
    # Allows to distinguish between installations
    servergroup: default
    ### HTTPD section ###
    httpd:
      # The version of the httpd-fcgi image
      version: latest
      # The port apache will be listening on
      port: 8080
      # Requests and limits for httpd
      requests:
        cpu: 500m
        memory: 200M
      limits:
        cpu: 500m
        memory: 200M
      # custom apache configuration to inject
      custom_config: ""
      # The version of the prometheus-httpd-exporter image
      exporter_version: latest
    phpfpm:
      # data about the image
      image:
        # The docker image for the main app
        name: __image_name__
        # the version of said image
        version: latest
        # WMF pipeline specific: we can have multiple "flavours" of the same release.
        # Leave blank to omit.
        flavour: ~
      # php-fpm configuration
      # Opcache tunables
      opcache:
        # Opcache size
        size: "100M"
        # maximum number of accelerated files.
        nofiles: 1024
      # time in seconds after which a slow request will be logged.
      slowlog_timeout: 1
      # timeout for a request
      timeout: 60
      # number of workers. Typically 2x the CPU cores.
      workers: 8
      # APCu configuration
      apc:
        size: 200M
      requests:
        cpu: 1
        memory: 500M
      limits:
        cpu: 2
        memory: 1G
      # Version of the phpfpm exporter
      exporter_version: latest
  monitoring:
    # If enabled is true, monitoring annotations will be added to the deployment.
    enabled: false
    # The ports to scrape are all labeled -metrics here.
    named_ports: true
  service:
    deployment: minikube # valid values are "production" and "minikube"
    port:
      name: http # a unique name of lowercase alphanumeric characters or "-", starting and ending with alphanumeric, max length 63
      # protocol: TCP # TCP is the default protocol
      targetPort: 8080 # the number or name of the exposed port on the container
      port: __port__ # the number of the port desired to be exposed to the cluster
      nodePort: null # you need to define this if "production" is used. In minikube environments let it autoallocate
  config:
  # Add here any secrets you might need
    private: {}

  # Additional resources if we want to add a port for a debugger to connect to.
  debug:
    enabled: false
    # Define here any port that you want to expose for debugging purposes
    ports: []
questions: image_name, port
